"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AmpAddOn = void 0;
const aps = require("aws-cdk-lib/aws-aps");
const utils_1 = require("../../utils");
const adot_1 = require("../adot");
const kubectl_provider_1 = require("../helm-addon/kubectl-provider");
/**
 * Defaults options for the add-on
 */
const defaultProps = {
    workspaceName: 'blueprints-amp-workspace',
    deploymentMode: "deployment" /* DeploymentMode.DEPLOYMENT */,
    name: 'adot-collector-amp',
    namespace: 'default'
};
/**
 * Implementation of AMP add-on for EKS Blueprints. Installs ADOT Collector.
 */
class AmpAddOn {
    constructor(props) {
        this.ampAddOnProps = { ...defaultProps, ...props };
    }
    deploy(clusterInfo) {
        const cluster = clusterInfo.cluster;
        let doc;
        let cfnWorkspace;
        let cfnWorkspaceProps = {
            alias: this.ampAddOnProps.workspaceName,
            tags: this.ampAddOnProps.workspaceTags
        };
        if (typeof (this.ampAddOnProps.prometheusRemoteWriteURL) == 'undefined' || this.ampAddOnProps.prometheusRemoteWriteURL == null) {
            cfnWorkspace = new aps.CfnWorkspace(cluster.stack, this.ampAddOnProps.workspaceName + "-amp-workspace", cfnWorkspaceProps); /* all optional props */
            const ampUrlEndpoint = cfnWorkspace.attrPrometheusEndpoint;
            this.ampAddOnProps.prometheusRemoteWriteURL = ampUrlEndpoint + 'api/v1/remote_write';
        }
        // Applying manifest for configuring ADOT Collector for Amp.
        if (this.ampAddOnProps.deploymentMode == "daemonset" /* DeploymentMode.DAEMONSET */) {
            doc = (0, utils_1.readYamlDocument)(__dirname + '/collector-config-amp-daemonset.ytpl');
        }
        else {
            doc = (0, utils_1.readYamlDocument)(__dirname + '/collector-config-amp.ytpl');
        }
        const manifest = doc.split("---").map(e => (0, utils_1.loadYaml)(e));
        const values = {
            remoteWriteEndpoint: this.ampAddOnProps.prometheusRemoteWriteURL,
            awsRegion: cluster.stack.region,
            deploymentMode: this.ampAddOnProps.deploymentMode,
            namespace: this.ampAddOnProps.namespace,
        };
        const manifestDeployment = {
            name: this.ampAddOnProps.name,
            namespace: this.ampAddOnProps.namespace,
            manifest,
            values
        };
        const kubectlProvider = new kubectl_provider_1.KubectlProvider(clusterInfo);
        const statement = kubectlProvider.addManifest(manifestDeployment);
        if (cfnWorkspace) {
            statement.node.addDependency(cfnWorkspace);
        }
        return Promise.resolve(statement);
    }
}
__decorate([
    (0, utils_1.dependable)(adot_1.AdotCollectorAddOn.name)
], AmpAddOn.prototype, "deploy", null);
exports.AmpAddOn = AmpAddOn;
//# sourceMappingURL=data:application/json;base64,