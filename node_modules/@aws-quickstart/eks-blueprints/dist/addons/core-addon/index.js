"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CoreAddOn = exports.CoreAddOnProps = void 0;
const aws_eks_1 = require("aws-cdk-lib/aws-eks");
const utils_1 = require("../../utils");
class CoreAddOnProps {
}
exports.CoreAddOnProps = CoreAddOnProps;
const DEFAULT_NAMESPACE = "kube-system";
/**
 * Implementation of EKS Managed add-ons.
 */
class CoreAddOn {
    constructor(coreAddOnProps) {
        this.coreAddOnProps = coreAddOnProps;
    }
    deploy(clusterInfo) {
        var _a, _b;
        let serviceAccountRoleArn = undefined;
        let serviceAccount = undefined;
        let saNamespace = undefined;
        saNamespace = DEFAULT_NAMESPACE;
        if ((_a = this.coreAddOnProps) === null || _a === void 0 ? void 0 : _a.namespace) {
            saNamespace = this.coreAddOnProps.namespace;
        }
        // Create a service account if user provides namespace, PolicyDocument
        if ((_b = this.coreAddOnProps) === null || _b === void 0 ? void 0 : _b.policyDocumentProvider) {
            const policyDoc = this.coreAddOnProps.policyDocumentProvider(clusterInfo.cluster.stack.partition);
            serviceAccount = (0, utils_1.createServiceAccount)(clusterInfo.cluster, this.coreAddOnProps.saName, saNamespace, policyDoc);
            serviceAccountRoleArn = serviceAccount.role.roleArn;
        }
        let addOnProps = {
            addonName: this.coreAddOnProps.addOnName,
            addonVersion: this.coreAddOnProps.version,
            clusterName: clusterInfo.cluster.clusterName,
            serviceAccountRoleArn: serviceAccountRoleArn,
            resolveConflicts: "OVERWRITE"
        };
        const cfnAddon = new aws_eks_1.CfnAddon(clusterInfo.cluster.stack, this.coreAddOnProps.addOnName + "-addOn", addOnProps);
        if (serviceAccount) {
            cfnAddon.node.addDependency(serviceAccount);
        }
        // Instantiate the Add-on
        return Promise.resolve(cfnAddon);
    }
}
exports.CoreAddOn = CoreAddOn;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvYWRkb25zL2NvcmUtYWRkb24vaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsaURBQStEO0FBSy9ELHVDQUFtRDtBQUVuRCxNQUFhLGNBQWM7Q0FzQjFCO0FBdEJELHdDQXNCQztBQUVELE1BQU0saUJBQWlCLEdBQUcsYUFBYSxDQUFDO0FBRXhDOztHQUVHO0FBQ0gsTUFBYSxTQUFTO0lBSWxCLFlBQVksY0FBOEI7UUFDdEMsSUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7SUFDekMsQ0FBQztJQUVELE1BQU0sQ0FBQyxXQUF3Qjs7UUFFM0IsSUFBSSxxQkFBcUIsR0FBdUIsU0FBUyxDQUFDO1FBQzFELElBQUksY0FBYyxHQUErQixTQUFTLENBQUM7UUFDM0QsSUFBSSxXQUFXLEdBQXVCLFNBQVMsQ0FBQztRQUVoRCxXQUFXLEdBQUcsaUJBQWlCLENBQUM7UUFDaEMsSUFBSSxNQUFBLElBQUksQ0FBQyxjQUFjLDBDQUFFLFNBQVMsRUFBRTtZQUNoQyxXQUFXLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUM7U0FDL0M7UUFFRCxzRUFBc0U7UUFDdEUsSUFBSSxNQUFBLElBQUksQ0FBQyxjQUFjLDBDQUFFLHNCQUFzQixFQUFFO1lBQzdDLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsc0JBQXNCLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDbEcsY0FBYyxHQUFJLElBQUEsNEJBQW9CLEVBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFDbEYsV0FBVyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1lBQzVCLHFCQUFxQixHQUFHLGNBQWMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO1NBQ3ZEO1FBRUQsSUFBSSxVQUFVLEdBQUc7WUFDYixTQUFTLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxTQUFTO1lBQ3hDLFlBQVksRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU87WUFDekMsV0FBVyxFQUFFLFdBQVcsQ0FBQyxPQUFPLENBQUMsV0FBVztZQUM1QyxxQkFBcUIsRUFBRSxxQkFBcUI7WUFDNUMsZ0JBQWdCLEVBQUUsV0FBVztTQUNoQyxDQUFDO1FBRUYsTUFBTSxRQUFRLEdBQUcsSUFBSSxrQkFBUSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxjQUFjLENBQUMsU0FBUyxHQUFHLFFBQVEsRUFBRSxVQUFVLENBQUMsQ0FBQztRQUMvRyxJQUFJLGNBQWMsRUFBRTtZQUNoQixRQUFRLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxjQUFjLENBQUMsQ0FBQztTQUMvQztRQUNELHlCQUF5QjtRQUN6QixPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDckMsQ0FBQztDQUNKO0FBMUNELDhCQTBDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENmbkFkZG9uLCBTZXJ2aWNlQWNjb3VudCB9IGZyb20gXCJhd3MtY2RrLWxpYi9hd3MtZWtzXCI7XG5pbXBvcnQgeyBDbHVzdGVyQWRkT24gfSBmcm9tIFwiLi4vLi5cIjtcbmltcG9ydCB7IENsdXN0ZXJJbmZvIH0gZnJvbSBcIi4uLy4uL3NwaVwiO1xuaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSBcImNvbnN0cnVjdHNcIjtcbmltcG9ydCB7IFBvbGljeURvY3VtZW50IH0gZnJvbSBcImF3cy1jZGstbGliL2F3cy1pYW1cIjtcbmltcG9ydCB7IGNyZWF0ZVNlcnZpY2VBY2NvdW50IH0gZnJvbSBcIi4uLy4uL3V0aWxzXCI7XG5cbmV4cG9ydCBjbGFzcyBDb3JlQWRkT25Qcm9wcyB7XG4gICAgLyoqXG4gICAgICogTmFtZSBvZiB0aGUgYWRkLW9uIHRvIGluc3RhbnRpYXRlXG4gICAgICovXG4gICAgcmVhZG9ubHkgYWRkT25OYW1lOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogVmVyc2lvbiBvZiB0aGUgYWRkLW9uIHRvIHVzZS4gTXVzdCBtYXRjaCB0aGUgdmVyc2lvbiBvZiB0aGUgY2x1c3RlciB3aGVyZSBpdFxuICAgICAqIHdpbGwgYmUgZGVwbG95ZWQgaXRcbiAgICAgKi9cbiAgICByZWFkb25seSB2ZXJzaW9uOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogUG9saWN5IGRvY3VtZW50IHByb3ZpZGVyIHJldHVybnMgdGhlIHBvbGljeSByZXF1aXJlZCBieSB0aGUgYWRkLW9uIHRvIGFsbG93IGl0IHRvIGludGVyYWN0IHdpdGggQVdTIHJlc291cmNlc1xuICAgICAqL1xuICAgIHJlYWRvbmx5IHBvbGljeURvY3VtZW50UHJvdmlkZXI/OiAocGFydGl0aW9uOiBzdHJpbmcpID0+IFBvbGljeURvY3VtZW50O1xuICAgIC8qKlxuICAgICAqIFNlcnZpY2UgQWNjb3VudCBOYW1lIHRvIGJlIHVzZWQgd2l0aCBBZGRPbi5cbiAgICAgKi9cbiAgICByZWFkb25seSBzYU5hbWU6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBOYW1lc3BhY2UgdG8gY3JlYXRlIHRoZSBTZXJ2aWNlQWNjb3VudC5cbiAgICAgKi9cbiAgICByZWFkb25seSBuYW1lc3BhY2U/OiBzdHJpbmc7XG59XG5cbmNvbnN0IERFRkFVTFRfTkFNRVNQQUNFID0gXCJrdWJlLXN5c3RlbVwiO1xuXG4vKipcbiAqIEltcGxlbWVudGF0aW9uIG9mIEVLUyBNYW5hZ2VkIGFkZC1vbnMuXG4gKi9cbmV4cG9ydCBjbGFzcyBDb3JlQWRkT24gaW1wbGVtZW50cyBDbHVzdGVyQWRkT24ge1xuXG4gICAgcmVhZG9ubHkgY29yZUFkZE9uUHJvcHM6IENvcmVBZGRPblByb3BzO1xuXG4gICAgY29uc3RydWN0b3IoY29yZUFkZE9uUHJvcHM6IENvcmVBZGRPblByb3BzKSB7XG4gICAgICAgIHRoaXMuY29yZUFkZE9uUHJvcHMgPSBjb3JlQWRkT25Qcm9wcztcbiAgICB9XG5cbiAgICBkZXBsb3koY2x1c3RlckluZm86IENsdXN0ZXJJbmZvKTogUHJvbWlzZTxDb25zdHJ1Y3Q+IHtcbiAgICAgICAgXG4gICAgICAgIGxldCBzZXJ2aWNlQWNjb3VudFJvbGVBcm46IHN0cmluZyB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgbGV0IHNlcnZpY2VBY2NvdW50OiBTZXJ2aWNlQWNjb3VudCB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgbGV0IHNhTmFtZXNwYWNlOiBzdHJpbmcgfCB1bmRlZmluZWQgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgc2FOYW1lc3BhY2UgPSBERUZBVUxUX05BTUVTUEFDRTtcbiAgICAgICAgaWYgKHRoaXMuY29yZUFkZE9uUHJvcHM/Lm5hbWVzcGFjZSkge1xuICAgICAgICAgICAgc2FOYW1lc3BhY2UgPSB0aGlzLmNvcmVBZGRPblByb3BzLm5hbWVzcGFjZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENyZWF0ZSBhIHNlcnZpY2UgYWNjb3VudCBpZiB1c2VyIHByb3ZpZGVzIG5hbWVzcGFjZSwgUG9saWN5RG9jdW1lbnRcbiAgICAgICAgaWYgKHRoaXMuY29yZUFkZE9uUHJvcHM/LnBvbGljeURvY3VtZW50UHJvdmlkZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IHBvbGljeURvYyA9IHRoaXMuY29yZUFkZE9uUHJvcHMucG9saWN5RG9jdW1lbnRQcm92aWRlcihjbHVzdGVySW5mby5jbHVzdGVyLnN0YWNrLnBhcnRpdGlvbik7XG4gICAgICAgICAgICBzZXJ2aWNlQWNjb3VudCAgPSBjcmVhdGVTZXJ2aWNlQWNjb3VudChjbHVzdGVySW5mby5jbHVzdGVyLCB0aGlzLmNvcmVBZGRPblByb3BzLnNhTmFtZSxcbiAgICAgICAgICAgICAgICBzYU5hbWVzcGFjZSwgcG9saWN5RG9jKTtcbiAgICAgICAgICAgIHNlcnZpY2VBY2NvdW50Um9sZUFybiA9IHNlcnZpY2VBY2NvdW50LnJvbGUucm9sZUFybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBhZGRPblByb3BzID0ge1xuICAgICAgICAgICAgYWRkb25OYW1lOiB0aGlzLmNvcmVBZGRPblByb3BzLmFkZE9uTmFtZSxcbiAgICAgICAgICAgIGFkZG9uVmVyc2lvbjogdGhpcy5jb3JlQWRkT25Qcm9wcy52ZXJzaW9uLFxuICAgICAgICAgICAgY2x1c3Rlck5hbWU6IGNsdXN0ZXJJbmZvLmNsdXN0ZXIuY2x1c3Rlck5hbWUsXG4gICAgICAgICAgICBzZXJ2aWNlQWNjb3VudFJvbGVBcm46IHNlcnZpY2VBY2NvdW50Um9sZUFybixcbiAgICAgICAgICAgIHJlc29sdmVDb25mbGljdHM6IFwiT1ZFUldSSVRFXCJcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBjZm5BZGRvbiA9IG5ldyBDZm5BZGRvbihjbHVzdGVySW5mby5jbHVzdGVyLnN0YWNrLCB0aGlzLmNvcmVBZGRPblByb3BzLmFkZE9uTmFtZSArIFwiLWFkZE9uXCIsIGFkZE9uUHJvcHMpO1xuICAgICAgICBpZiAoc2VydmljZUFjY291bnQpIHtcbiAgICAgICAgICAgIGNmbkFkZG9uLm5vZGUuYWRkRGVwZW5kZW5jeShzZXJ2aWNlQWNjb3VudCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSW5zdGFudGlhdGUgdGhlIEFkZC1vblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGNmbkFkZG9uKTtcbiAgICB9XG59Il19