"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CertManagerAddOn = void 0;
const ts_deepmerge_1 = require("ts-deepmerge");
const utils_1 = require("../../utils");
const object_utils_1 = require("../../utils/object-utils");
const helm_addon_1 = require("../helm-addon");
/**
 * Default props to be used when creating the Helm chart
 */
const defaultProps = {
    name: "blueprints-cert-manager-addon",
    namespace: "cert-manager",
    chart: "cert-manager",
    version: "1.9.1",
    release: "cert-manager",
    repository: "https://charts.jetstack.io",
    values: {},
    installCRDs: true,
    createNamespace: true
};
/**
 * Main class to instantiate the Helm chart
 */
class CertManagerAddOn extends helm_addon_1.HelmAddOn {
    constructor(props) {
        super({ ...defaultProps, ...props });
        this.options = this.props;
    }
    deploy(clusterInfo) {
        var _a;
        const cluster = clusterInfo.cluster;
        let values = populateValues(this.options);
        values = (0, ts_deepmerge_1.default)(values, (_a = this.props.values) !== null && _a !== void 0 ? _a : {});
        if (this.options.createNamespace == true) {
            // Let CDK Create the Namespace
            const namespace = (0, utils_1.createNamespace)(this.options.namespace, cluster);
            const chart = this.addHelmChart(clusterInfo, values);
            chart.node.addDependency(namespace);
            return Promise.resolve(chart);
        }
        else {
            //Namespace is already created
            const chart = this.addHelmChart(clusterInfo, values);
            return Promise.resolve(chart);
        }
    }
}
exports.CertManagerAddOn = CertManagerAddOn;
/**
 * populateValues populates the appropriate values used to customize the Helm chart
 * @param helmOptions User provided values to customize the chart
 */
function populateValues(helmOptions) {
    var _a;
    const values = (_a = helmOptions.values) !== null && _a !== void 0 ? _a : {};
    (0, object_utils_1.setPath)(values, "installCRDs", helmOptions.installCRDs);
    return values;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvYWRkb25zL2NlcnQtbWFuYWdlci9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFFQSwrQ0FBaUM7QUFFakMsdUNBQThDO0FBQzlDLDJEQUFtRDtBQUNuRCw4Q0FBOEU7QUFlOUU7O0dBRUc7QUFDSCxNQUFNLFlBQVksR0FBMkM7SUFDM0QsSUFBSSxFQUFFLCtCQUErQjtJQUNyQyxTQUFTLEVBQUUsY0FBYztJQUN6QixLQUFLLEVBQUUsY0FBYztJQUNyQixPQUFPLEVBQUUsT0FBTztJQUNoQixPQUFPLEVBQUUsY0FBYztJQUN2QixVQUFVLEVBQUcsNEJBQTRCO0lBQ3pDLE1BQU0sRUFBRSxFQUFFO0lBQ1YsV0FBVyxFQUFFLElBQUk7SUFDakIsZUFBZSxFQUFFLElBQUk7Q0FFdEIsQ0FBQztBQUVGOztHQUVHO0FBQ0gsTUFBYSxnQkFBaUIsU0FBUSxzQkFBUztJQUk3QyxZQUFZLEtBQTZCO1FBQ3ZDLEtBQUssQ0FBQyxFQUFDLEdBQUcsWUFBWSxFQUFFLEdBQUcsS0FBSyxFQUFDLENBQUMsQ0FBQztRQUNuQyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxLQUE4QixDQUFDO0lBQ3JELENBQUM7SUFFRCxNQUFNLENBQUMsV0FBd0I7O1FBQzdCLE1BQU0sT0FBTyxHQUFHLFdBQVcsQ0FBQyxPQUFPLENBQUM7UUFDcEMsSUFBSSxNQUFNLEdBQVcsY0FBYyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNsRCxNQUFNLEdBQUcsSUFBQSxzQkFBSyxFQUFDLE1BQU0sRUFBRSxNQUFBLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxtQ0FBSSxFQUFFLENBQUMsQ0FBQztRQUVoRCxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxJQUFJLElBQUksRUFBQztZQUN2QywrQkFBK0I7WUFDL0IsTUFBTSxTQUFTLEdBQUcsSUFBQSx1QkFBZSxFQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBVSxFQUFHLE9BQU8sQ0FBQyxDQUFDO1lBQ3JFLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQ3JELEtBQUssQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQ3BDLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUUvQjthQUFNO1lBQ0wsOEJBQThCO1lBQzlCLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQ3JELE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUMvQjtJQUVILENBQUM7Q0FDRjtBQTVCRCw0Q0E0QkM7QUFFRDs7O0dBR0c7QUFDSCxTQUFTLGNBQWMsQ0FBQyxXQUFrQzs7SUFDeEQsTUFBTSxNQUFNLEdBQUcsTUFBQSxXQUFXLENBQUMsTUFBTSxtQ0FBSSxFQUFFLENBQUM7SUFDeEMsSUFBQSxzQkFBTyxFQUFDLE1BQU0sRUFBRSxhQUFhLEVBQUcsV0FBVyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ3pELE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBsaWIvY2VydG1hbmFnZXJfYWRkb24udHNcclxuaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSAnY29uc3RydWN0cyc7XHJcbmltcG9ydCBtZXJnZSBmcm9tIFwidHMtZGVlcG1lcmdlXCI7XHJcbmltcG9ydCB7IENsdXN0ZXJJbmZvLCBWYWx1ZXMgfSBmcm9tIFwiLi4vLi4vc3BpXCI7XHJcbmltcG9ydCB7IGNyZWF0ZU5hbWVzcGFjZSB9IGZyb20gXCIuLi8uLi91dGlsc1wiO1xyXG5pbXBvcnQgeyBzZXRQYXRoIH0gZnJvbSAnLi4vLi4vdXRpbHMvb2JqZWN0LXV0aWxzJztcclxuaW1wb3J0IHsgSGVsbUFkZE9uLCBIZWxtQWRkT25Qcm9wcywgSGVsbUFkZE9uVXNlclByb3BzIH0gZnJvbSBcIi4uL2hlbG0tYWRkb25cIjtcclxuLyoqXHJcbiAqIFVzZXIgcHJvdmlkZWQgb3B0aW9ucyBmb3IgdGhlIEhlbG0gQ2hhcnRcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ2VydE1hbmFnZXJBZGRPblByb3BzIGV4dGVuZHMgSGVsbUFkZE9uVXNlclByb3BzIHtcclxuICAgIC8qKlxyXG4gICAgICogVG8gYXV0b21hdGljYWxseSBpbnN0YWxsIGFuZCBtYW5hZ2UgdGhlIENSRHMgYXMgcGFydCBvZiB5b3VyIEhlbG0gcmVsZWFzZSxcclxuICAgICAqLyAgICBcclxuICAgIGluc3RhbGxDUkRzPzogYm9vbGVhbjtcclxuICAgIC8qKlxyXG4gICAgICogVG8gQ3JlYXRlIE5hbWVzcGFjZSB1c2luZyBDREtcclxuICAgICAqLyAgICBcclxuICAgIGNyZWF0ZU5hbWVzcGFjZT86IGJvb2xlYW47XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBEZWZhdWx0IHByb3BzIHRvIGJlIHVzZWQgd2hlbiBjcmVhdGluZyB0aGUgSGVsbSBjaGFydFxyXG4gKi9cclxuY29uc3QgZGVmYXVsdFByb3BzOiBIZWxtQWRkT25Qcm9wcyAmIENlcnRNYW5hZ2VyQWRkT25Qcm9wcyA9IHtcclxuICBuYW1lOiBcImJsdWVwcmludHMtY2VydC1tYW5hZ2VyLWFkZG9uXCIsXHJcbiAgbmFtZXNwYWNlOiBcImNlcnQtbWFuYWdlclwiLFxyXG4gIGNoYXJ0OiBcImNlcnQtbWFuYWdlclwiLFxyXG4gIHZlcnNpb246IFwiMS45LjFcIixcclxuICByZWxlYXNlOiBcImNlcnQtbWFuYWdlclwiLFxyXG4gIHJlcG9zaXRvcnk6ICBcImh0dHBzOi8vY2hhcnRzLmpldHN0YWNrLmlvXCIsXHJcbiAgdmFsdWVzOiB7fSxcclxuICBpbnN0YWxsQ1JEczogdHJ1ZSwgLy9UbyBhdXRvbWF0aWNhbGx5IGluc3RhbGwgYW5kIG1hbmFnZSB0aGUgQ1JEcyBhcyBwYXJ0IG9mIHlvdXIgSGVsbSByZWxlYXNlLFxyXG4gIGNyZWF0ZU5hbWVzcGFjZTogdHJ1ZVxyXG5cclxufTtcclxuXHJcbi8qKlxyXG4gKiBNYWluIGNsYXNzIHRvIGluc3RhbnRpYXRlIHRoZSBIZWxtIGNoYXJ0XHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQ2VydE1hbmFnZXJBZGRPbiBleHRlbmRzIEhlbG1BZGRPbiB7XHJcblxyXG4gIHJlYWRvbmx5IG9wdGlvbnM6IENlcnRNYW5hZ2VyQWRkT25Qcm9wcztcclxuXHJcbiAgY29uc3RydWN0b3IocHJvcHM/OiBDZXJ0TWFuYWdlckFkZE9uUHJvcHMpIHtcclxuICAgIHN1cGVyKHsuLi5kZWZhdWx0UHJvcHMsIC4uLnByb3BzfSk7XHJcbiAgICB0aGlzLm9wdGlvbnMgPSB0aGlzLnByb3BzIGFzIENlcnRNYW5hZ2VyQWRkT25Qcm9wcztcclxuICB9XHJcblxyXG4gIGRlcGxveShjbHVzdGVySW5mbzogQ2x1c3RlckluZm8pOiBQcm9taXNlPENvbnN0cnVjdD4ge1xyXG4gICAgY29uc3QgY2x1c3RlciA9IGNsdXN0ZXJJbmZvLmNsdXN0ZXI7XHJcbiAgICBsZXQgdmFsdWVzOiBWYWx1ZXMgPSBwb3B1bGF0ZVZhbHVlcyh0aGlzLm9wdGlvbnMpO1xyXG4gICAgdmFsdWVzID0gbWVyZ2UodmFsdWVzLCB0aGlzLnByb3BzLnZhbHVlcyA/PyB7fSk7XHJcblxyXG4gICAgaWYoIHRoaXMub3B0aW9ucy5jcmVhdGVOYW1lc3BhY2UgPT0gdHJ1ZSl7XHJcbiAgICAgIC8vIExldCBDREsgQ3JlYXRlIHRoZSBOYW1lc3BhY2VcclxuICAgICAgY29uc3QgbmFtZXNwYWNlID0gY3JlYXRlTmFtZXNwYWNlKHRoaXMub3B0aW9ucy5uYW1lc3BhY2UhICwgY2x1c3Rlcik7XHJcbiAgICAgIGNvbnN0IGNoYXJ0ID0gdGhpcy5hZGRIZWxtQ2hhcnQoY2x1c3RlckluZm8sIHZhbHVlcyk7XHJcbiAgICAgIGNoYXJ0Lm5vZGUuYWRkRGVwZW5kZW5jeShuYW1lc3BhY2UpO1xyXG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGNoYXJ0KTtcclxuXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAvL05hbWVzcGFjZSBpcyBhbHJlYWR5IGNyZWF0ZWRcclxuICAgICAgY29uc3QgY2hhcnQgPSB0aGlzLmFkZEhlbG1DaGFydChjbHVzdGVySW5mbywgdmFsdWVzKTtcclxuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShjaGFydCk7XHJcbiAgICB9XHJcbiAgICBcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBwb3B1bGF0ZVZhbHVlcyBwb3B1bGF0ZXMgdGhlIGFwcHJvcHJpYXRlIHZhbHVlcyB1c2VkIHRvIGN1c3RvbWl6ZSB0aGUgSGVsbSBjaGFydFxyXG4gKiBAcGFyYW0gaGVsbU9wdGlvbnMgVXNlciBwcm92aWRlZCB2YWx1ZXMgdG8gY3VzdG9taXplIHRoZSBjaGFydFxyXG4gKi9cclxuZnVuY3Rpb24gcG9wdWxhdGVWYWx1ZXMoaGVsbU9wdGlvbnM6IENlcnRNYW5hZ2VyQWRkT25Qcm9wcyk6IFZhbHVlcyB7XHJcbiAgY29uc3QgdmFsdWVzID0gaGVsbU9wdGlvbnMudmFsdWVzID8/IHt9O1xyXG4gIHNldFBhdGgodmFsdWVzLCBcImluc3RhbGxDUkRzXCIsICBoZWxtT3B0aW9ucy5pbnN0YWxsQ1JEcyk7XHJcbiAgcmV0dXJuIHZhbHVlcztcclxufVxyXG4iXX0=