"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CloudWatchAdotAddOn = void 0;
const utils_1 = require("../../utils");
const adot_1 = require("../adot");
const kubectl_provider_1 = require("../helm-addon/kubectl-provider");
/**
 * Defaults options for the add-on
 */
const defaultProps = {
    deploymentMode: "deployment" /* cloudWatchDeploymentMode.DEPLOYMENT */,
    namespace: 'default',
    name: 'adot-collector-cloudwatch'
};
/**
 * Implementation of CloudWatch ADOT add-on for EKS Blueprints. Installs ADOT Collector.
 */
class CloudWatchAdotAddOn {
    constructor(props) {
        this.cloudWatchAddOnProps = { ...defaultProps, ...props };
    }
    deploy(clusterInfo) {
        const cluster = clusterInfo.cluster;
        // Applying manifest for configuring ADOT Collector for CloudWatch.
        const doc = (0, utils_1.readYamlDocument)(__dirname + '/collector-config-cloudwatch.ytpl');
        const manifest = doc.split("---").map(e => (0, utils_1.loadYaml)(e));
        const values = {
            awsRegion: cluster.stack.region,
            deploymentMode: this.cloudWatchAddOnProps.deploymentMode,
            namespace: this.cloudWatchAddOnProps.namespace,
            clusterName: cluster.clusterName
        };
        const manifestDeployment = {
            name: this.cloudWatchAddOnProps.name,
            namespace: this.cloudWatchAddOnProps.namespace,
            manifest,
            values
        };
        const kubectlProvider = new kubectl_provider_1.KubectlProvider(clusterInfo);
        const statement = kubectlProvider.addManifest(manifestDeployment);
        return Promise.resolve(statement);
    }
}
__decorate([
    (0, utils_1.dependable)(adot_1.AdotCollectorAddOn.name)
], CloudWatchAdotAddOn.prototype, "deploy", null);
exports.CloudWatchAdotAddOn = CloudWatchAdotAddOn;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvYWRkb25zL2Nsb3Vkd2F0Y2gtYWRvdC1hZGRvbi9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFDQSx1Q0FBcUU7QUFDckUsa0NBQTZDO0FBRTdDLHFFQUFxRjtBQXFDckY7O0dBRUc7QUFDSCxNQUFNLFlBQVksR0FBRztJQUNqQixjQUFjLHdEQUFxQztJQUNuRCxTQUFTLEVBQUUsU0FBUztJQUNwQixJQUFJLEVBQUUsMkJBQTJCO0NBQ3BDLENBQUM7QUFFRjs7R0FFRztBQUNILE1BQWEsbUJBQW1CO0lBSTVCLFlBQVksS0FBZ0M7UUFDeEMsSUFBSSxDQUFDLG9CQUFvQixHQUFHLEVBQUUsR0FBRyxZQUFZLEVBQUUsR0FBRyxLQUFLLEVBQUUsQ0FBQztJQUM5RCxDQUFDO0lBR0QsTUFBTSxDQUFDLFdBQXdCO1FBQzNCLE1BQU0sT0FBTyxHQUFHLFdBQVcsQ0FBQyxPQUFPLENBQUM7UUFFcEMsbUVBQW1FO1FBQ25FLE1BQU0sR0FBRyxHQUFHLElBQUEsd0JBQWdCLEVBQUMsU0FBUyxHQUFFLG1DQUFtQyxDQUFDLENBQUM7UUFDN0UsTUFBTSxRQUFRLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFBLGdCQUFRLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN4RCxNQUFNLE1BQU0sR0FBVztZQUNuQixTQUFTLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxNQUFNO1lBQy9CLGNBQWMsRUFBRSxJQUFJLENBQUMsb0JBQW9CLENBQUMsY0FBYztZQUN4RCxTQUFTLEVBQUUsSUFBSSxDQUFDLG9CQUFvQixDQUFDLFNBQVM7WUFDOUMsV0FBVyxFQUFFLE9BQU8sQ0FBQyxXQUFXO1NBQ2xDLENBQUM7UUFFRixNQUFNLGtCQUFrQixHQUF1QjtZQUM1QyxJQUFJLEVBQUUsSUFBSSxDQUFDLG9CQUFvQixDQUFDLElBQUs7WUFDckMsU0FBUyxFQUFFLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxTQUFVO1lBQy9DLFFBQVE7WUFDUixNQUFNO1NBQ1QsQ0FBQztRQUVGLE1BQU0sZUFBZSxHQUFHLElBQUksa0NBQWUsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUN6RCxNQUFNLFNBQVMsR0FBRyxlQUFlLENBQUMsV0FBVyxDQUFDLGtCQUFrQixDQUFDLENBQUM7UUFDbEUsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3RDLENBQUM7Q0FDSjtBQXhCRztJQURDLElBQUEsa0JBQVUsRUFBQyx5QkFBa0IsQ0FBQyxJQUFJLENBQUM7aURBd0JuQztBQWhDTCxrREFpQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDbHVzdGVyQWRkT24sIENsdXN0ZXJJbmZvLCBWYWx1ZXMgfSBmcm9tIFwiLi4vLi4vc3BpXCI7XG5pbXBvcnQgeyBkZXBlbmRhYmxlLCBsb2FkWWFtbCwgcmVhZFlhbWxEb2N1bWVudCB9IGZyb20gXCIuLi8uLi91dGlsc1wiO1xuaW1wb3J0IHsgQWRvdENvbGxlY3RvckFkZE9uIH0gZnJvbSBcIi4uL2Fkb3RcIjtcbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gJ2NvbnN0cnVjdHMnO1xuaW1wb3J0IHsgS3ViZWN0bFByb3ZpZGVyLCBNYW5pZmVzdERlcGxveW1lbnQgfSBmcm9tIFwiLi4vaGVsbS1hZGRvbi9rdWJlY3RsLXByb3ZpZGVyXCI7XG5cbi8qKlxuICogVGhpcyBDbG91ZFdhdGNoIEFET1QgQWRkb24gZGVwbG95cyBhbiBBV1MgRGlzdHJvIGZvciBPcGVuVGVsZW1ldHJ5IChBRE9UKSBDb2xsZWN0b3IgZm9yIFxuICogQ2xvdWRXYXRjaCB3aGljaCByZWNlaXZlcyBtZXRyaWNzIGFuZCBsb2dzIGZyb20gdGhlIGFwcGxpY2F0aW9uIGFuZCBzZW5kcyB0aGUgc2FtZSB0byBcbiAqIENsb3VkV2F0Y2ggY29uc29sZS4gWW91IGNhbiBjaGFuZ2UgdGhlIG1vZGUgdG8gRGFlbW9uc2V0LCBTdGF0ZWZ1bFNldCwgYW5kIFNpZGVjYXIgXG4gKiBkZXBlbmRpbmcgb24geW91ciBkZXBsb3ltZW50IHN0cmF0ZWd5LlxuICovXG5cbi8qKlxuICogQ29uZmlndXJhdGlvbiBvcHRpb25zIGZvciBhZGQtb24uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ2xvdWRXYXRjaEFkb3RBZGRPblByb3BzIHtcbiAgICAvKipcbiAgICAgKiBNb2RlcyBzdXBwb3J0ZWQgOiBgZGVwbG95bWVudGAsIGBkYWVtb25zZXRgLCBgc3RhdGVmdWxTZXRgLCBhbmQgYHNpZGVjYXJgXG4gICAgICogQGRlZmF1bHQgZGVwbG95bWVudFxuICAgICAqL1xuICAgIGRlcGxveW1lbnRNb2RlPzogY2xvdWRXYXRjaERlcGxveW1lbnRNb2RlO1xuICAgIC8qKlxuICAgICAqIE5hbWVzcGFjZSB0byBkZXBsb3kgdGhlIEFET1QgQ29sbGVjdG9yIGZvciBDbG91ZFdhdGNoLlxuICAgICAqIEBkZWZhdWx0IGRlZmF1bHRcbiAgICAgKi9cbiAgICBuYW1lc3BhY2U/OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogTmFtZSB0byBkZXBsb3kgdGhlIEFET1QgQ29sbGVjdG9yIGZvciBDbG91ZFdhdGNoLlxuICAgICAqIEBkZWZhdWx0ICdhZG90LWNvbGxlY3Rvci1jbG91ZHdhdGNoJ1xuICAgICAqL1xuICAgICBuYW1lPzogc3RyaW5nO1xufVxuXG5leHBvcnQgY29uc3QgZW51bSBjbG91ZFdhdGNoRGVwbG95bWVudE1vZGUge1xuICAgIERFUExPWU1FTlQgPSAnZGVwbG95bWVudCcsXG4gICAgREFFTU9OU0VUID0gJ2RhZW1vbnNldCcsXG4gICAgU1RBVEVGVUxTRVQgPSAnc3RhdGVmdWxzZXQnLFxuICAgIFNJREVDQVIgPSAnc2lkZWNhcidcbn1cblxuLyoqXG4gKiBEZWZhdWx0cyBvcHRpb25zIGZvciB0aGUgYWRkLW9uXG4gKi9cbmNvbnN0IGRlZmF1bHRQcm9wcyA9IHtcbiAgICBkZXBsb3ltZW50TW9kZTogY2xvdWRXYXRjaERlcGxveW1lbnRNb2RlLkRFUExPWU1FTlQsXG4gICAgbmFtZXNwYWNlOiAnZGVmYXVsdCcsXG4gICAgbmFtZTogJ2Fkb3QtY29sbGVjdG9yLWNsb3Vkd2F0Y2gnXG59O1xuXG4vKipcbiAqIEltcGxlbWVudGF0aW9uIG9mIENsb3VkV2F0Y2ggQURPVCBhZGQtb24gZm9yIEVLUyBCbHVlcHJpbnRzLiBJbnN0YWxscyBBRE9UIENvbGxlY3Rvci5cbiAqL1xuZXhwb3J0IGNsYXNzIENsb3VkV2F0Y2hBZG90QWRkT24gaW1wbGVtZW50cyBDbHVzdGVyQWRkT24ge1xuXG4gICAgcmVhZG9ubHkgY2xvdWRXYXRjaEFkZE9uUHJvcHM6IENsb3VkV2F0Y2hBZG90QWRkT25Qcm9wcztcblxuICAgIGNvbnN0cnVjdG9yKHByb3BzPzogQ2xvdWRXYXRjaEFkb3RBZGRPblByb3BzKSB7XG4gICAgICAgIHRoaXMuY2xvdWRXYXRjaEFkZE9uUHJvcHMgPSB7IC4uLmRlZmF1bHRQcm9wcywgLi4ucHJvcHMgfTtcbiAgICB9XG5cbiAgICBAZGVwZW5kYWJsZShBZG90Q29sbGVjdG9yQWRkT24ubmFtZSlcbiAgICBkZXBsb3koY2x1c3RlckluZm86IENsdXN0ZXJJbmZvKTogUHJvbWlzZTxDb25zdHJ1Y3Q+IHtcbiAgICAgICAgY29uc3QgY2x1c3RlciA9IGNsdXN0ZXJJbmZvLmNsdXN0ZXI7XG5cbiAgICAgICAgLy8gQXBwbHlpbmcgbWFuaWZlc3QgZm9yIGNvbmZpZ3VyaW5nIEFET1QgQ29sbGVjdG9yIGZvciBDbG91ZFdhdGNoLlxuICAgICAgICBjb25zdCBkb2MgPSByZWFkWWFtbERvY3VtZW50KF9fZGlybmFtZSArJy9jb2xsZWN0b3ItY29uZmlnLWNsb3Vkd2F0Y2gueXRwbCcpO1xuICAgICAgICBjb25zdCBtYW5pZmVzdCA9IGRvYy5zcGxpdChcIi0tLVwiKS5tYXAoZSA9PiBsb2FkWWFtbChlKSk7XG4gICAgICAgIGNvbnN0IHZhbHVlczogVmFsdWVzID0ge1xuICAgICAgICAgICAgYXdzUmVnaW9uOiBjbHVzdGVyLnN0YWNrLnJlZ2lvbixcbiAgICAgICAgICAgIGRlcGxveW1lbnRNb2RlOiB0aGlzLmNsb3VkV2F0Y2hBZGRPblByb3BzLmRlcGxveW1lbnRNb2RlLFxuICAgICAgICAgICAgbmFtZXNwYWNlOiB0aGlzLmNsb3VkV2F0Y2hBZGRPblByb3BzLm5hbWVzcGFjZSxcbiAgICAgICAgICAgIGNsdXN0ZXJOYW1lOiBjbHVzdGVyLmNsdXN0ZXJOYW1lXG4gICAgICAgICB9O1xuICAgICAgICAgXG4gICAgICAgICBjb25zdCBtYW5pZmVzdERlcGxveW1lbnQ6IE1hbmlmZXN0RGVwbG95bWVudCA9IHtcbiAgICAgICAgICAgIG5hbWU6IHRoaXMuY2xvdWRXYXRjaEFkZE9uUHJvcHMubmFtZSEsXG4gICAgICAgICAgICBuYW1lc3BhY2U6IHRoaXMuY2xvdWRXYXRjaEFkZE9uUHJvcHMubmFtZXNwYWNlISxcbiAgICAgICAgICAgIG1hbmlmZXN0LFxuICAgICAgICAgICAgdmFsdWVzXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3Qga3ViZWN0bFByb3ZpZGVyID0gbmV3IEt1YmVjdGxQcm92aWRlcihjbHVzdGVySW5mbyk7XG4gICAgICAgIGNvbnN0IHN0YXRlbWVudCA9IGt1YmVjdGxQcm92aWRlci5hZGRNYW5pZmVzdChtYW5pZmVzdERlcGxveW1lbnQpO1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHN0YXRlbWVudCk7XG4gICAgfVxufSJdfQ==