"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IstioBaseAddOn = void 0;
const helm_addon_1 = require("../helm-addon");
const namespace_utils_1 = require("../../utils/namespace-utils");
const ts_deepmerge_1 = require("ts-deepmerge");
/**
 * Defaults options for the add-on
 */
const defaultProps = {
    name: "istio-base",
    release: "istio-base",
    namespace: "istio-system",
    chart: "base",
    version: "1.14.3",
    repository: "https://istio-release.storage.googleapis.com/charts"
};
class IstioBaseAddOn extends helm_addon_1.HelmAddOn {
    constructor(props) {
        super({ ...defaultProps, ...props });
        this.options = this.props;
    }
    deploy(clusterInfo) {
        var _a;
        const cluster = clusterInfo.cluster;
        // Istio Namespace
        (0, namespace_utils_1.createNamespace)('istio-system', cluster);
        let values = {
            global: {
                istiod: {
                    enableAnalysis: this.options.enableAnalysis
                },
                configValidation: this.options.configValidation,
                externalIstiod: this.options.externalIstiod,
                base: {
                    enableIstioConfigCRDs: this.options.enableIstioConfigCRDs
                }
            }
        };
        values = (0, ts_deepmerge_1.default)(values, (_a = this.props.values) !== null && _a !== void 0 ? _a : {});
        const chart = this.addHelmChart(clusterInfo, values);
        return Promise.resolve(chart);
    }
}
exports.IstioBaseAddOn = IstioBaseAddOn;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvYWRkb25zL2lzdGlvLWJhc2UvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOENBQThEO0FBRzlELGlFQUE4RDtBQUM5RCwrQ0FBaUM7QUE0Q2pDOztHQUVHO0FBQ0gsTUFBTSxZQUFZLEdBQUc7SUFDakIsSUFBSSxFQUFFLFlBQVk7SUFDbEIsT0FBTyxFQUFFLFlBQVk7SUFDckIsU0FBUyxFQUFFLGNBQWM7SUFDekIsS0FBSyxFQUFFLE1BQU07SUFDYixPQUFPLEVBQUUsUUFBUTtJQUNqQixVQUFVLEVBQUUscURBQXFEO0NBQ3BFLENBQUM7QUFFRixNQUFhLGNBQWUsU0FBUSxzQkFBUztJQUl6QyxZQUFZLEtBQTJCO1FBQ25DLEtBQUssQ0FBQyxFQUFFLEdBQUcsWUFBWSxFQUFFLEdBQUcsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUNyQyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDOUIsQ0FBQztJQUVELE1BQU0sQ0FBQyxXQUF3Qjs7UUFFM0IsTUFBTSxPQUFPLEdBQUcsV0FBVyxDQUFDLE9BQU8sQ0FBQztRQUVwQyxrQkFBa0I7UUFDbEIsSUFBQSxpQ0FBZSxFQUFDLGNBQWMsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUV6QyxJQUFJLE1BQU0sR0FBVztZQUNqQixNQUFNLEVBQUU7Z0JBQ0osTUFBTSxFQUFFO29CQUNKLGNBQWMsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWM7aUJBQzlDO2dCQUNELGdCQUFnQixFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCO2dCQUMvQyxjQUFjLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjO2dCQUMzQyxJQUFJLEVBQUU7b0JBQ0YscUJBQXFCLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxxQkFBcUI7aUJBQzVEO2FBQ0o7U0FDSixDQUFDO1FBRUYsTUFBTSxHQUFHLElBQUEsc0JBQUssRUFBQyxNQUFNLEVBQUUsTUFBQSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sbUNBQUksRUFBRSxDQUFDLENBQUM7UUFDaEQsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDckQsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2xDLENBQUM7Q0FDSjtBQWpDRCx3Q0FpQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIZWxtQWRkT24sIEhlbG1BZGRPblVzZXJQcm9wcyB9IGZyb20gXCIuLi9oZWxtLWFkZG9uXCI7XG5pbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tIFwiY29uc3RydWN0c1wiO1xuaW1wb3J0IHsgQ2x1c3RlckluZm8sIFZhbHVlcyB9IGZyb20gXCIuLi8uLi9zcGlcIjtcbmltcG9ydCB7IGNyZWF0ZU5hbWVzcGFjZSB9IGZyb20gXCIuLi8uLi91dGlscy9uYW1lc3BhY2UtdXRpbHNcIjtcbmltcG9ydCBtZXJnZSBmcm9tIFwidHMtZGVlcG1lcmdlXCI7XG5cbi8qKlxuICogQ29uZmlndXJhdGlvbiBvcHRpb25zIGZvciB0aGUgYWRkLW9uLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIElzdGlvQmFzZUFkZE9uUHJvcHMgZXh0ZW5kcyBIZWxtQWRkT25Vc2VyUHJvcHMge1xuICAgIC8qKlxuICAgICogRW5hYmxlIGlzdGlvY3RsIGFuYWx5c2lzIHdoaWNoIHByb3ZpZGVzIHJpY2ggYW5hbHlzaXMgb2YgSXN0aW8gY29uZmlndXJhdGlvbiBzdGF0ZSBpbiBvcmRlciB0byBpZGVudGl0eSBpbnZhbGlkIG9yIHN1Ym9wdGltYWwgY29uZmlndXJhdGlvbnMuXG4gICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgICovXG4gICAgZW5hYmxlQW5hbHlzaXM/OiBib29sZWFuO1xuXG4gICAgLyoqXG4gICAgKiAgRW5hYmxlIHRoZSBpc3RpbyBiYXNlIGNvbmZpZyB2YWxpZGF0aW9uLlxuICAgICogQGRlZmF1bHQgdHJ1ZVxuICAgICovXG4gICAgY29uZmlnVmFsaWRhdGlvbj86IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAqICBJZiB0aGlzIGlzIHNldCB0byB0cnVlLCBvbmUgSXN0aW9kIHdpbGwgY29udHJvbCByZW1vdGUgY2x1c3RlcnMgaW5jbHVkaW5nIENBLlxuICAgICogQGRlZmF1bHQgZmFsc2VcbiAgICAqL1xuICAgIGV4dGVybmFsSXN0aW9kPzogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICogVGhlIGFkZHJlc3Mgb3IgaG9zdG5hbWUgb2YgdGhlIHJlbW90ZSBwaWxvdFxuICAgICogQGRlZmF1bHQgbnVsbFxuICAgICovXG4gICAgcmVtb3RlUGlsb3RBZGRyZXNzPzogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgKiBWYWxpZGF0aW9uIHdlYmhvb2sgY29uZmlndXJhdGlvbiB1cmxcbiAgICAqIEZvciBleGFtcGxlOiBodHRwczovLyRyZW1vdGVQaWxvdEFkZHJlc3M6MTUwMTcvdmFsaWRhdGVcbiAgICAqIEBkZWZhdWx0IG51bGxcbiAgICAqL1xuICAgIHZhbGlkYXRpb25VUkw/OiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAqIEZvciBpc3Rpb2N0bCB1c2FnZSB0byBkaXNhYmxlIGlzdGlvIGNvbmZpZyBjcmRzIGluIGJhc2UuXG4gICAgKiBAZGVmYXVsdCB0cnVlXG4gICAgKi9cbiAgICBlbmFibGVJc3Rpb0NvbmZpZ0NSRHM/OiBib29sZWFuO1xufVxuXG4vKipcbiAqIERlZmF1bHRzIG9wdGlvbnMgZm9yIHRoZSBhZGQtb25cbiAqL1xuY29uc3QgZGVmYXVsdFByb3BzID0ge1xuICAgIG5hbWU6IFwiaXN0aW8tYmFzZVwiLFxuICAgIHJlbGVhc2U6IFwiaXN0aW8tYmFzZVwiLFxuICAgIG5hbWVzcGFjZTogXCJpc3Rpby1zeXN0ZW1cIixcbiAgICBjaGFydDogXCJiYXNlXCIsXG4gICAgdmVyc2lvbjogXCIxLjE0LjNcIixcbiAgICByZXBvc2l0b3J5OiBcImh0dHBzOi8vaXN0aW8tcmVsZWFzZS5zdG9yYWdlLmdvb2dsZWFwaXMuY29tL2NoYXJ0c1wiXG59O1xuXG5leHBvcnQgY2xhc3MgSXN0aW9CYXNlQWRkT24gZXh0ZW5kcyBIZWxtQWRkT24ge1xuXG4gICAgcmVhZG9ubHkgb3B0aW9uczogSXN0aW9CYXNlQWRkT25Qcm9wcztcblxuICAgIGNvbnN0cnVjdG9yKHByb3BzPzogSXN0aW9CYXNlQWRkT25Qcm9wcykge1xuICAgICAgICBzdXBlcih7IC4uLmRlZmF1bHRQcm9wcywgLi4ucHJvcHMgfSk7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IHRoaXMucHJvcHM7XG4gICAgfVxuXG4gICAgZGVwbG95KGNsdXN0ZXJJbmZvOiBDbHVzdGVySW5mbyk6IFByb21pc2U8Q29uc3RydWN0PiB7XG5cbiAgICAgICAgY29uc3QgY2x1c3RlciA9IGNsdXN0ZXJJbmZvLmNsdXN0ZXI7XG5cbiAgICAgICAgLy8gSXN0aW8gTmFtZXNwYWNlXG4gICAgICAgIGNyZWF0ZU5hbWVzcGFjZSgnaXN0aW8tc3lzdGVtJywgY2x1c3Rlcik7XG5cbiAgICAgICAgbGV0IHZhbHVlczogVmFsdWVzID0ge1xuICAgICAgICAgICAgZ2xvYmFsOiB7XG4gICAgICAgICAgICAgICAgaXN0aW9kOiB7XG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZUFuYWx5c2lzOiB0aGlzLm9wdGlvbnMuZW5hYmxlQW5hbHlzaXNcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNvbmZpZ1ZhbGlkYXRpb246IHRoaXMub3B0aW9ucy5jb25maWdWYWxpZGF0aW9uLFxuICAgICAgICAgICAgICAgIGV4dGVybmFsSXN0aW9kOiB0aGlzLm9wdGlvbnMuZXh0ZXJuYWxJc3Rpb2QsXG4gICAgICAgICAgICAgICAgYmFzZToge1xuICAgICAgICAgICAgICAgICAgICBlbmFibGVJc3Rpb0NvbmZpZ0NSRHM6IHRoaXMub3B0aW9ucy5lbmFibGVJc3Rpb0NvbmZpZ0NSRHNcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFsdWVzID0gbWVyZ2UodmFsdWVzLCB0aGlzLnByb3BzLnZhbHVlcyA/PyB7fSk7XG4gICAgICAgIGNvbnN0IGNoYXJ0ID0gdGhpcy5hZGRIZWxtQ2hhcnQoY2x1c3RlckluZm8sIHZhbHVlcyk7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoY2hhcnQpO1xuICAgIH1cbn1cbiJdfQ==