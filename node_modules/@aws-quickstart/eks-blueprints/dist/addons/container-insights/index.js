"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContainerInsightsAddOn = void 0;
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
const ts_deepmerge_1 = require("ts-deepmerge");
const __1 = require("../..");
const helm_addon_1 = require("../helm-addon");
const defaultProps = {
    name: "adot-exporter-for-eks-on-ec2",
    namespace: undefined,
    chart: "adot-exporter-for-eks-on-ec2",
    version: "0.1.0",
    release: "adot-eks-addon",
    repository: "https://aws-observability.github.io/aws-otel-helm-charts"
};
/**
 * @deprecated Use CloudWatchAdotAddOn.
 */
class ContainerInsightsAddOn extends helm_addon_1.HelmAddOn {
    constructor(props) {
        super({ ...defaultProps, ...props });
    }
    /**
     * @override
     */
    deploy(clusterInfo) {
        var _a;
        const cluster = clusterInfo.cluster;
        const nodeGroups = (0, __1.assertEC2NodeGroup)(clusterInfo, ContainerInsightsAddOn.name);
        const policy = aws_iam_1.ManagedPolicy.fromAwsManagedPolicyName('CloudWatchAgentServerPolicy');
        nodeGroups.forEach(nodeGroup => {
            nodeGroup.role.addManagedPolicy(policy);
        });
        let values = {
            awsRegion: cluster.stack.region,
            clusterName: cluster.clusterName,
            fluentbit: {
                enabled: true
            }
        };
        values = (0, ts_deepmerge_1.default)(values, (_a = this.props.values) !== null && _a !== void 0 ? _a : {});
        const chart = this.addHelmChart(clusterInfo, values, true, false);
        return Promise.resolve(chart);
    }
}
exports.ContainerInsightsAddOn = ContainerInsightsAddOn;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvYWRkb25zL2NvbnRhaW5lci1pbnNpZ2h0cy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxpREFBb0Q7QUFFcEQsK0NBQWlDO0FBQ2pDLDZCQUEyQztBQUUzQyw4Q0FBOEQ7QUFPOUQsTUFBTSxZQUFZLEdBQUc7SUFDakIsSUFBSSxFQUFFLDhCQUE4QjtJQUNwQyxTQUFTLEVBQUUsU0FBUztJQUNwQixLQUFLLEVBQUUsOEJBQThCO0lBQ3JDLE9BQU8sRUFBRSxPQUFPO0lBQ2hCLE9BQU8sRUFBRSxnQkFBZ0I7SUFDekIsVUFBVSxFQUFFLDBEQUEwRDtDQUN6RSxDQUFDO0FBR0Y7O0dBRUc7QUFDSCxNQUFhLHNCQUF1QixTQUFRLHNCQUFTO0lBRWpELFlBQVksS0FBa0M7UUFDMUMsS0FBSyxDQUFDLEVBQUUsR0FBRyxZQUFZLEVBQUUsR0FBRyxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFFRDs7T0FFRztJQUNILE1BQU0sQ0FBQyxXQUF3Qjs7UUFDM0IsTUFBTSxPQUFPLEdBQUcsV0FBVyxDQUFDLE9BQU8sQ0FBQztRQUNwQyxNQUFNLFVBQVUsR0FBRyxJQUFBLHNCQUFrQixFQUFDLFdBQVcsRUFBRSxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUVoRixNQUFNLE1BQU0sR0FBRyx1QkFBYSxDQUFDLHdCQUF3QixDQUFDLDZCQUE2QixDQUFDLENBQUM7UUFFckYsVUFBVSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsRUFBRTtZQUMzQixTQUFTLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzVDLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxNQUFNLEdBQWlCO1lBQ3ZCLFNBQVMsRUFBRSxPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU07WUFDL0IsV0FBVyxFQUFFLE9BQU8sQ0FBQyxXQUFXO1lBQ2hDLFNBQVMsRUFBRTtnQkFDUCxPQUFPLEVBQUUsSUFBSTthQUNoQjtTQUNKLENBQUM7UUFFRixNQUFNLEdBQUcsSUFBQSxzQkFBSyxFQUFDLE1BQU0sRUFBRSxNQUFBLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxtQ0FBSSxFQUFFLENBQUMsQ0FBQztRQUVoRCxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ2xFLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNsQyxDQUFDO0NBQ0o7QUFoQ0Qsd0RBZ0NDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWFuYWdlZFBvbGljeSB9IGZyb20gXCJhd3MtY2RrLWxpYi9hd3MtaWFtXCI7XG5pbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tIFwiY29uc3RydWN0c1wiO1xuaW1wb3J0IG1lcmdlIGZyb20gXCJ0cy1kZWVwbWVyZ2VcIjtcbmltcG9ydCB7IGFzc2VydEVDMk5vZGVHcm91cCB9IGZyb20gXCIuLi8uLlwiO1xuaW1wb3J0IHsgQ2x1c3RlckluZm8gfSBmcm9tIFwiLi4vLi4vc3BpXCI7XG5pbXBvcnQgeyBIZWxtQWRkT24sIEhlbG1BZGRPblVzZXJQcm9wcyB9IGZyb20gXCIuLi9oZWxtLWFkZG9uXCI7XG5pbXBvcnQgeyBWYWx1ZXNTY2hlbWEgfSBmcm9tIFwiLi92YWx1ZXNcIjtcblxuZXhwb3J0IGludGVyZmFjZSBDb250YWluZXJJbnNpZ2h0QWRkb25Qcm9wcyBleHRlbmRzIE9taXQ8SGVsbUFkZE9uVXNlclByb3BzLCBcIm5hbWVzcGFjZVwiPiB7XG4gICAgdmFsdWVzPzogVmFsdWVzU2NoZW1hXG59XG5cbmNvbnN0IGRlZmF1bHRQcm9wcyA9IHtcbiAgICBuYW1lOiBcImFkb3QtZXhwb3J0ZXItZm9yLWVrcy1vbi1lYzJcIixcbiAgICBuYW1lc3BhY2U6IHVuZGVmaW5lZCwgLy8gdGhlIGNoYXJ0IHdpbGwgY2hva2UgaWYgdGhpcyB2YWx1ZSBpcyBzZXRcbiAgICBjaGFydDogXCJhZG90LWV4cG9ydGVyLWZvci1la3Mtb24tZWMyXCIsXG4gICAgdmVyc2lvbjogXCIwLjEuMFwiLFxuICAgIHJlbGVhc2U6IFwiYWRvdC1la3MtYWRkb25cIixcbiAgICByZXBvc2l0b3J5OiBcImh0dHBzOi8vYXdzLW9ic2VydmFiaWxpdHkuZ2l0aHViLmlvL2F3cy1vdGVsLWhlbG0tY2hhcnRzXCJcbn07XG5cblxuLyoqXG4gKiBAZGVwcmVjYXRlZCBVc2UgQ2xvdWRXYXRjaEFkb3RBZGRPbi5cbiAqL1xuZXhwb3J0IGNsYXNzIENvbnRhaW5lckluc2lnaHRzQWRkT24gZXh0ZW5kcyBIZWxtQWRkT24ge1xuXG4gICAgY29uc3RydWN0b3IocHJvcHM/OiBDb250YWluZXJJbnNpZ2h0QWRkb25Qcm9wcykge1xuICAgICAgICBzdXBlcih7IC4uLmRlZmF1bHRQcm9wcywgLi4ucHJvcHMgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgZGVwbG95KGNsdXN0ZXJJbmZvOiBDbHVzdGVySW5mbyk6IFByb21pc2U8Q29uc3RydWN0PiB7XG4gICAgICAgIGNvbnN0IGNsdXN0ZXIgPSBjbHVzdGVySW5mby5jbHVzdGVyOyAgICAgICAgXG4gICAgICAgIGNvbnN0IG5vZGVHcm91cHMgPSBhc3NlcnRFQzJOb2RlR3JvdXAoY2x1c3RlckluZm8sIENvbnRhaW5lckluc2lnaHRzQWRkT24ubmFtZSk7XG5cbiAgICAgICAgY29uc3QgcG9saWN5ID0gTWFuYWdlZFBvbGljeS5mcm9tQXdzTWFuYWdlZFBvbGljeU5hbWUoJ0Nsb3VkV2F0Y2hBZ2VudFNlcnZlclBvbGljeScpO1xuICAgICAgICBcbiAgICAgICAgbm9kZUdyb3Vwcy5mb3JFYWNoKG5vZGVHcm91cCA9PiB7XG4gICAgICAgICAgICBub2RlR3JvdXAucm9sZS5hZGRNYW5hZ2VkUG9saWN5KHBvbGljeSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGxldCB2YWx1ZXM6IFZhbHVlc1NjaGVtYSA9IHtcbiAgICAgICAgICAgIGF3c1JlZ2lvbjogY2x1c3Rlci5zdGFjay5yZWdpb24sXG4gICAgICAgICAgICBjbHVzdGVyTmFtZTogY2x1c3Rlci5jbHVzdGVyTmFtZSxcbiAgICAgICAgICAgIGZsdWVudGJpdDoge1xuICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICB2YWx1ZXMgPSBtZXJnZSh2YWx1ZXMsIHRoaXMucHJvcHMudmFsdWVzID8/IHt9KTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGNoYXJ0ID0gdGhpcy5hZGRIZWxtQ2hhcnQoY2x1c3RlckluZm8sIHZhbHVlcywgdHJ1ZSwgZmFsc2UpO1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGNoYXJ0KTtcbiAgICB9XG59Il19