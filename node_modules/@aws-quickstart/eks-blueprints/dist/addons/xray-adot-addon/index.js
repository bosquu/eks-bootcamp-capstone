"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.XrayAdotAddOn = void 0;
const utils_1 = require("../../utils");
const adot_1 = require("../adot");
const kubectl_provider_1 = require("../helm-addon/kubectl-provider");
/**
 * Defaults options for the add-on
 */
const defaultProps = {
    deploymentMode: "deployment" /* xrayDeploymentMode.DEPLOYMENT */,
    name: 'adot-collector-xray',
    namespace: 'default'
};
/**
 * Implementation of XRAY ADOT add-on for EKS Blueprints. Installs ADOT Collector.
 */
class XrayAdotAddOn {
    constructor(props) {
        this.xrayAddOnProps = { ...defaultProps, ...props };
    }
    deploy(clusterInfo) {
        const cluster = clusterInfo.cluster;
        let doc;
        // Applying manifest for configuring ADOT Collector for Xray.
        doc = (0, utils_1.readYamlDocument)(__dirname + '/collector-config-xray.ytpl');
        const manifest = doc.split("---").map(e => (0, utils_1.loadYaml)(e));
        const values = {
            awsRegion: cluster.stack.region,
            deploymentMode: this.xrayAddOnProps.deploymentMode,
            namespace: this.xrayAddOnProps.namespace
        };
        const manifestDeployment = {
            name: this.xrayAddOnProps.name,
            namespace: this.xrayAddOnProps.namespace,
            manifest,
            values
        };
        const kubectlProvider = new kubectl_provider_1.KubectlProvider(clusterInfo);
        const statement = kubectlProvider.addManifest(manifestDeployment);
        return Promise.resolve(statement);
    }
}
__decorate([
    (0, utils_1.dependable)(adot_1.AdotCollectorAddOn.name)
], XrayAdotAddOn.prototype, "deploy", null);
exports.XrayAdotAddOn = XrayAdotAddOn;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvYWRkb25zL3hyYXktYWRvdC1hZGRvbi9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFDQSx1Q0FBcUU7QUFDckUsa0NBQTZDO0FBRTdDLHFFQUFxRjtBQW9DckY7O0dBRUc7QUFDSCxNQUFNLFlBQVksR0FBRztJQUNqQixjQUFjLGtEQUErQjtJQUM3QyxJQUFJLEVBQUUscUJBQXFCO0lBQzNCLFNBQVMsRUFBRSxTQUFTO0NBQ3ZCLENBQUM7QUFFRjs7R0FFRztBQUNILE1BQWEsYUFBYTtJQUd0QixZQUFZLEtBQTBCO1FBQ2xDLElBQUksQ0FBQyxjQUFjLEdBQUcsRUFBRSxHQUFHLFlBQVksRUFBRSxHQUFHLEtBQUssRUFBRSxDQUFDO0lBQ3hELENBQUM7SUFHRCxNQUFNLENBQUMsV0FBd0I7UUFDM0IsTUFBTSxPQUFPLEdBQUcsV0FBVyxDQUFDLE9BQU8sQ0FBQztRQUNwQyxJQUFJLEdBQVcsQ0FBQztRQUVoQiw2REFBNkQ7UUFDN0QsR0FBRyxHQUFHLElBQUEsd0JBQWdCLEVBQUMsU0FBUyxHQUFFLDZCQUE2QixDQUFDLENBQUM7UUFFakUsTUFBTSxRQUFRLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFBLGdCQUFRLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN4RCxNQUFNLE1BQU0sR0FBVztZQUNuQixTQUFTLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxNQUFNO1lBQy9CLGNBQWMsRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLGNBQWM7WUFDbEQsU0FBUyxFQUFFLElBQUksQ0FBQyxjQUFjLENBQUMsU0FBUztTQUMxQyxDQUFDO1FBRUYsTUFBTSxrQkFBa0IsR0FBdUI7WUFDNUMsSUFBSSxFQUFFLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSztZQUMvQixTQUFTLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxTQUFVO1lBQ3pDLFFBQVE7WUFDUixNQUFNO1NBQ1QsQ0FBQztRQUVGLE1BQU0sZUFBZSxHQUFHLElBQUksa0NBQWUsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUN6RCxNQUFNLFNBQVMsR0FBRyxlQUFlLENBQUMsV0FBVyxDQUFDLGtCQUFrQixDQUFDLENBQUM7UUFDbEUsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3RDLENBQUM7Q0FDSjtBQXpCRztJQURDLElBQUEsa0JBQVUsRUFBQyx5QkFBa0IsQ0FBQyxJQUFJLENBQUM7MkNBeUJuQztBQWhDTCxzQ0FpQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDbHVzdGVyQWRkT24sIENsdXN0ZXJJbmZvLCBWYWx1ZXMgfSBmcm9tIFwiLi4vLi4vc3BpXCI7XG5pbXBvcnQgeyBkZXBlbmRhYmxlLCBsb2FkWWFtbCwgcmVhZFlhbWxEb2N1bWVudCB9IGZyb20gXCIuLi8uLi91dGlsc1wiO1xuaW1wb3J0IHsgQWRvdENvbGxlY3RvckFkZE9uIH0gZnJvbSBcIi4uL2Fkb3RcIjtcbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gJ2NvbnN0cnVjdHMnO1xuaW1wb3J0IHsgS3ViZWN0bFByb3ZpZGVyLCBNYW5pZmVzdERlcGxveW1lbnQgfSBmcm9tIFwiLi4vaGVsbS1hZGRvbi9rdWJlY3RsLXByb3ZpZGVyXCI7XG5cbi8qKlxuICogVGhpcyBYUkFZIEFET1QgYWRkLW9uIGRlcGxveXMgYW4gQVdTIERpc3RybyBmb3IgT3BlblRlbGVtZXRyeSAoQURPVCkgQ29sbGVjdG9yIGZvciBYLVJheSB3aGljaCByZWNlaXZlcyB0cmFjZXMgZnJvbSB0aGUgXG4gKiBhcHBsaWNhdGlvbiBhbmQgc2VuZHMgdGhlIHNhbWUgdG8gWC1SYXkgY29uc29sZS4gWW91IGNhbiBjaGFuZ2UgdGhlIG1vZGUgdG8gRGFlbW9uc2V0LCBTdGF0ZWZ1bFNldCwgXG4gKiBhbmQgU2lkZWNhciBkZXBlbmRpbmcgb24geW91ciBkZXBsb3ltZW50IHN0cmF0ZWd5LlxuICovXG5cbi8qKlxuICogQ29uZmlndXJhdGlvbiBvcHRpb25zIGZvciBhZGQtb24uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgWHJheUFkb3RBZGRPblByb3BzIHtcbiAgICAvKipcbiAgICAgKiBNb2RlcyBzdXBwb3J0ZWQgOiBgZGVwbG95bWVudGAsIGBkYWVtb25zZXRgLCBgc3RhdGVmdWxTZXRgLCBhbmQgYHNpZGVjYXJgXG4gICAgICogQGRlZmF1bHQgZGVwbG95bWVudFxuICAgICAqL1xuICAgIGRlcGxveW1lbnRNb2RlPzogeHJheURlcGxveW1lbnRNb2RlO1xuICAgIC8qKlxuICAgICAqIE5hbWVzcGFjZSB0byBkZXBsb3kgdGhlIEFET1QgQ29sbGVjdG9yIGZvciBYUmF5LlxuICAgICAqIEBkZWZhdWx0IGRlZmF1bHRcbiAgICAgKi9cbiAgICBuYW1lc3BhY2U/OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogTmFtZSBmb3IgZGVwbG95bWVudCBvZiB0aGUgQURPVCBDb2xsZWN0b3IgZm9yIFhSYXkuXG4gICAgICogQGRlZmF1bHQgJ2Fkb3QtY29sbGVjdG9yLXhyYXknXG4gICAgICovXG4gICAgbmFtZT86IHN0cmluZztcbn1cblxuZXhwb3J0IGNvbnN0IGVudW0geHJheURlcGxveW1lbnRNb2RlIHtcbiAgICBERVBMT1lNRU5UID0gJ2RlcGxveW1lbnQnLFxuICAgIERBRU1PTlNFVCA9ICdkYWVtb25zZXQnLFxuICAgIFNUQVRFRlVMU0VUID0gJ3N0YXRlZnVsc2V0JyxcbiAgICBTSURFQ0FSID0gJ3NpZGVjYXInXG59XG5cbi8qKlxuICogRGVmYXVsdHMgb3B0aW9ucyBmb3IgdGhlIGFkZC1vblxuICovXG5jb25zdCBkZWZhdWx0UHJvcHMgPSB7XG4gICAgZGVwbG95bWVudE1vZGU6IHhyYXlEZXBsb3ltZW50TW9kZS5ERVBMT1lNRU5ULFxuICAgIG5hbWU6ICdhZG90LWNvbGxlY3Rvci14cmF5JyxcbiAgICBuYW1lc3BhY2U6ICdkZWZhdWx0J1xufTtcblxuLyoqXG4gKiBJbXBsZW1lbnRhdGlvbiBvZiBYUkFZIEFET1QgYWRkLW9uIGZvciBFS1MgQmx1ZXByaW50cy4gSW5zdGFsbHMgQURPVCBDb2xsZWN0b3IuXG4gKi9cbmV4cG9ydCBjbGFzcyBYcmF5QWRvdEFkZE9uIGltcGxlbWVudHMgQ2x1c3RlckFkZE9uIHtcblxuICAgIHJlYWRvbmx5IHhyYXlBZGRPblByb3BzOiBYcmF5QWRvdEFkZE9uUHJvcHM7XG4gICAgY29uc3RydWN0b3IocHJvcHM/OiBYcmF5QWRvdEFkZE9uUHJvcHMpIHtcbiAgICAgICAgdGhpcy54cmF5QWRkT25Qcm9wcyA9IHsgLi4uZGVmYXVsdFByb3BzLCAuLi5wcm9wcyB9O1xuICAgIH1cblxuICAgIEBkZXBlbmRhYmxlKEFkb3RDb2xsZWN0b3JBZGRPbi5uYW1lKVxuICAgIGRlcGxveShjbHVzdGVySW5mbzogQ2x1c3RlckluZm8pOiBQcm9taXNlPENvbnN0cnVjdD4ge1xuICAgICAgICBjb25zdCBjbHVzdGVyID0gY2x1c3RlckluZm8uY2x1c3RlcjtcbiAgICAgICAgbGV0IGRvYzogc3RyaW5nO1xuXG4gICAgICAgIC8vIEFwcGx5aW5nIG1hbmlmZXN0IGZvciBjb25maWd1cmluZyBBRE9UIENvbGxlY3RvciBmb3IgWHJheS5cbiAgICAgICAgZG9jID0gcmVhZFlhbWxEb2N1bWVudChfX2Rpcm5hbWUgKycvY29sbGVjdG9yLWNvbmZpZy14cmF5Lnl0cGwnKTtcblxuICAgICAgICBjb25zdCBtYW5pZmVzdCA9IGRvYy5zcGxpdChcIi0tLVwiKS5tYXAoZSA9PiBsb2FkWWFtbChlKSk7XG4gICAgICAgIGNvbnN0IHZhbHVlczogVmFsdWVzID0ge1xuICAgICAgICAgICAgYXdzUmVnaW9uOiBjbHVzdGVyLnN0YWNrLnJlZ2lvbixcbiAgICAgICAgICAgIGRlcGxveW1lbnRNb2RlOiB0aGlzLnhyYXlBZGRPblByb3BzLmRlcGxveW1lbnRNb2RlLFxuICAgICAgICAgICAgbmFtZXNwYWNlOiB0aGlzLnhyYXlBZGRPblByb3BzLm5hbWVzcGFjZVxuICAgICAgICAgfTtcbiAgICAgICAgIFxuICAgICAgICAgY29uc3QgbWFuaWZlc3REZXBsb3ltZW50OiBNYW5pZmVzdERlcGxveW1lbnQgPSB7XG4gICAgICAgICAgICBuYW1lOiB0aGlzLnhyYXlBZGRPblByb3BzLm5hbWUhLFxuICAgICAgICAgICAgbmFtZXNwYWNlOiB0aGlzLnhyYXlBZGRPblByb3BzLm5hbWVzcGFjZSEsXG4gICAgICAgICAgICBtYW5pZmVzdCxcbiAgICAgICAgICAgIHZhbHVlc1xuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IGt1YmVjdGxQcm92aWRlciA9IG5ldyBLdWJlY3RsUHJvdmlkZXIoY2x1c3RlckluZm8pO1xuICAgICAgICBjb25zdCBzdGF0ZW1lbnQgPSBrdWJlY3RsUHJvdmlkZXIuYWRkTWFuaWZlc3QobWFuaWZlc3REZXBsb3ltZW50KTtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShzdGF0ZW1lbnQpO1xuICAgIH1cbn0iXX0=