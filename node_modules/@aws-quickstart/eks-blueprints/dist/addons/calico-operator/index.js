"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CalicoOperatorAddOn = void 0;
const ts_deepmerge_1 = require("ts-deepmerge");
const helm_addon_1 = require("../helm-addon");
/**
 * Defaults options for the add-on
 */
const defaultProps = {
    name: 'calico-operator',
    namespace: 'calico-operator',
    version: 'v3.23.3',
    chart: "tigera-operator",
    release: "bp-addon-calico-operator",
    repository: "https://projectcalico.docs.tigera.io/charts"
};
class CalicoOperatorAddOn extends helm_addon_1.HelmAddOn {
    constructor(props) {
        super({ ...defaultProps, ...props });
        this.options = this.props;
    }
    deploy(clusterInfo) {
        var _a;
        const values = (_a = this.options.values) !== null && _a !== void 0 ? _a : {};
        const defaultValues = {};
        const merged = (0, ts_deepmerge_1.default)(defaultValues, values);
        this.addHelmChart(clusterInfo, merged);
    }
}
exports.CalicoOperatorAddOn = CalicoOperatorAddOn;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvYWRkb25zL2NhbGljby1vcGVyYXRvci9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwrQ0FBaUM7QUFFakMsOENBQThEO0FBeUI5RDs7R0FFRztBQUNILE1BQU0sWUFBWSxHQUFHO0lBQ2pCLElBQUksRUFBRSxpQkFBaUI7SUFDdkIsU0FBUyxFQUFFLGlCQUFpQjtJQUM1QixPQUFPLEVBQUUsU0FBUztJQUNsQixLQUFLLEVBQUUsaUJBQWlCO0lBQ3hCLE9BQU8sRUFBRSwwQkFBMEI7SUFDbkMsVUFBVSxFQUFFLDZDQUE2QztDQUM1RCxDQUFDO0FBRUYsTUFBYSxtQkFBb0IsU0FBUSxzQkFBUztJQUk5QyxZQUFZLEtBQWdDO1FBQ3hDLEtBQUssQ0FBQyxFQUFDLEdBQUcsWUFBWSxFQUFFLEdBQUcsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUNwQyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDOUIsQ0FBQztJQUVELE1BQU0sQ0FBQyxXQUF3Qjs7UUFDM0IsTUFBTSxNQUFNLEdBQUcsTUFBQSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sbUNBQUksRUFBRSxDQUFDO1FBQ3pDLE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQztRQUV6QixNQUFNLE1BQU0sR0FBRyxJQUFBLHNCQUFLLEVBQUMsYUFBYSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBRTVDLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQzNDLENBQUM7Q0FDSjtBQWpCRCxrREFpQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbWVyZ2UgZnJvbSBcInRzLWRlZXBtZXJnZVwiO1xuaW1wb3J0IHsgQ2x1c3RlckluZm8gfSBmcm9tIFwiLi4vLi4vc3BpXCI7XG5pbXBvcnQgeyBIZWxtQWRkT24sIEhlbG1BZGRPblVzZXJQcm9wcyB9IGZyb20gXCIuLi9oZWxtLWFkZG9uXCI7XG5cbi8qKlxuICogQ29uZmlndXJhdGlvbiBvcHRpb25zIGZvciB0aGUgYWRkLW9uLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIENhbGljb09wZXJhdG9yQWRkT25Qcm9wcyBleHRlbmRzIEhlbG1BZGRPblVzZXJQcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBOYW1lc3BhY2Ugd2hlcmUgQ2FsaWNvIHdpbGwgYmUgaW5zdGFsbGVkXG4gICAgICogQGRlZmF1bHQga3ViZS1zeXN0ZW1cbiAgICAgKi9cbiAgICBuYW1lc3BhY2U/OiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBIZWxtIGNoYXJ0IHZlcnNpb24gdG8gdXNlIHRvIGluc3RhbGwuXG4gICAgICogQGRlZmF1bHQgMy4yMy4xXG4gICAgICovXG4gICAgdmVyc2lvbj86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFZhbHVlcyBmb3IgdGhlIEhlbG0gY2hhcnQuXG4gICAgICovXG4gICAgdmFsdWVzPzogYW55O1xufVxuXG4vKipcbiAqIERlZmF1bHRzIG9wdGlvbnMgZm9yIHRoZSBhZGQtb25cbiAqL1xuY29uc3QgZGVmYXVsdFByb3BzID0ge1xuICAgIG5hbWU6ICdjYWxpY28tb3BlcmF0b3InLFxuICAgIG5hbWVzcGFjZTogJ2NhbGljby1vcGVyYXRvcicsXG4gICAgdmVyc2lvbjogJ3YzLjIzLjMnLFxuICAgIGNoYXJ0OiBcInRpZ2VyYS1vcGVyYXRvclwiLFxuICAgIHJlbGVhc2U6IFwiYnAtYWRkb24tY2FsaWNvLW9wZXJhdG9yXCIsXG4gICAgcmVwb3NpdG9yeTogXCJodHRwczovL3Byb2plY3RjYWxpY28uZG9jcy50aWdlcmEuaW8vY2hhcnRzXCJcbn07XG5cbmV4cG9ydCBjbGFzcyBDYWxpY29PcGVyYXRvckFkZE9uIGV4dGVuZHMgSGVsbUFkZE9uIHtcblxuICAgIHByaXZhdGUgb3B0aW9uczogQ2FsaWNvT3BlcmF0b3JBZGRPblByb3BzO1xuXG4gICAgY29uc3RydWN0b3IocHJvcHM/OiBDYWxpY29PcGVyYXRvckFkZE9uUHJvcHMpIHtcbiAgICAgICAgc3VwZXIoey4uLmRlZmF1bHRQcm9wcywgLi4ucHJvcHMgfSk7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IHRoaXMucHJvcHM7XG4gICAgfVxuXG4gICAgZGVwbG95KGNsdXN0ZXJJbmZvOiBDbHVzdGVySW5mbyk6IHZvaWQge1xuICAgICAgICBjb25zdCB2YWx1ZXMgPSB0aGlzLm9wdGlvbnMudmFsdWVzID8/IHt9O1xuICAgICAgICBjb25zdCBkZWZhdWx0VmFsdWVzID0ge307XG5cbiAgICAgICAgY29uc3QgbWVyZ2VkID0gbWVyZ2UoZGVmYXVsdFZhbHVlcywgdmFsdWVzKTtcblxuICAgICAgICB0aGlzLmFkZEhlbG1DaGFydChjbHVzdGVySW5mbywgbWVyZ2VkKTtcbiAgICB9XG59XG4iXX0=