"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FalcoAddOn = void 0;
const index_1 = require("../helm-addon/index");
const utils_1 = require("../../utils");
/**
 * Default props to be used when creating the Helm chart
 */
const defaultProps = {
    name: "blueprints-falco-addon",
    namespace: "falco",
    chart: "falco",
    version: "2.0.15",
    release: "falco",
    repository: "https://falcosecurity.github.io/charts",
    createNamespace: true,
    values: {}
};
/**
 * This add-on is currently not supported. It will apply the latest falco helm chart but the latest AMI does not have stock driver supported and
 * driver build in the init fails atm.
 */
class FalcoAddOn extends index_1.HelmAddOn {
    constructor(props) {
        super({ ...defaultProps, ...props });
        this.options = this.props;
    }
    deploy(clusterInfo) {
        let values = populateValues(this.options);
        const chart = this.addHelmChart(clusterInfo, values);
        return Promise.resolve(chart);
    }
}
exports.FalcoAddOn = FalcoAddOn;
/**
 * populateValues populates the appropriate values used to customize the Helm chart
 * @param helmOptions User provided values to customize the chart
 */
function populateValues(helmOptions) {
    var _a, _b, _c, _d, _e;
    const values = (_a = helmOptions.values) !== null && _a !== void 0 ? _a : {};
    (0, utils_1.setPath)(values, "kubernetes.support.enabled", (_b = helmOptions.kubernetesSupportEnabled) !== null && _b !== void 0 ? _b : true);
    (0, utils_1.setPath)(values, "falco.sidekick.enabled", (_c = helmOptions.falcoSidekickEnabled) !== null && _c !== void 0 ? _c : true);
    (0, utils_1.setPath)(values, "falco.sidekick.webui.enabled", (_d = helmOptions.falcoSidekickWebuiEnabled) !== null && _d !== void 0 ? _d : true);
    (0, utils_1.setPath)(values, "audit.logs.enabled", (_e = helmOptions.auditLogsEnabled) !== null && _e !== void 0 ? _e : true);
    return values;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvYWRkb25zL2ZhbGNvL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUVBLCtDQUFnRDtBQUVoRCx1Q0FBc0M7QUFrQ3RDOztHQUVHO0FBQ0YsTUFBTSxZQUFZLEdBQXFDO0lBQ3BELElBQUksRUFBRSx3QkFBd0I7SUFDOUIsU0FBUyxFQUFFLE9BQU87SUFDbEIsS0FBSyxFQUFFLE9BQU87SUFDZCxPQUFPLEVBQUUsUUFBUTtJQUNqQixPQUFPLEVBQUUsT0FBTztJQUNoQixVQUFVLEVBQUcsd0NBQXdDO0lBQ3JELGVBQWUsRUFBRSxJQUFJO0lBQ3JCLE1BQU0sRUFBRSxFQUFFO0NBQ2IsQ0FBQztBQUVGOzs7R0FHRztBQUNILE1BQWEsVUFBVyxTQUFRLGlCQUFTO0lBSXJDLFlBQVksS0FBdUI7UUFDL0IsS0FBSyxDQUFDLEVBQUMsR0FBRyxZQUFZLEVBQUUsR0FBRyxLQUFLLEVBQUMsQ0FBQyxDQUFDO1FBQ25DLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQXdCLENBQUM7SUFDakQsQ0FBQztJQUVELE1BQU0sQ0FBQyxXQUF3QjtRQUMzQixJQUFJLE1BQU0sR0FBVyxjQUFjLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ2xELE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBRXJELE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNsQyxDQUFDO0NBQ0o7QUFmRCxnQ0FlQztBQUVEOzs7R0FHRztBQUNILFNBQVMsY0FBYyxDQUFDLFdBQTRCOztJQUNoRCxNQUFNLE1BQU0sR0FBRyxNQUFBLFdBQVcsQ0FBQyxNQUFNLG1DQUFJLEVBQUUsQ0FBQztJQUV4QyxJQUFBLGVBQU8sRUFBQyxNQUFNLEVBQUUsNEJBQTRCLEVBQUcsTUFBQSxXQUFXLENBQUMsd0JBQXdCLG1DQUFJLElBQUksQ0FBQyxDQUFDO0lBQzdGLElBQUEsZUFBTyxFQUFDLE1BQU0sRUFBRSx3QkFBd0IsRUFBRyxNQUFBLFdBQVcsQ0FBQyxvQkFBb0IsbUNBQUksSUFBSSxDQUFDLENBQUM7SUFDckYsSUFBQSxlQUFPLEVBQUMsTUFBTSxFQUFFLDhCQUE4QixFQUFHLE1BQUEsV0FBVyxDQUFDLHlCQUF5QixtQ0FBSSxJQUFJLENBQUMsQ0FBQztJQUNoRyxJQUFBLGVBQU8sRUFBQyxNQUFNLEVBQUUsb0JBQW9CLEVBQUcsTUFBQSxXQUFXLENBQUMsZ0JBQWdCLG1DQUFJLElBQUksQ0FBQyxDQUFDO0lBRTdFLE9BQU8sTUFBTSxDQUFDO0FBQ2xCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIZWxtQWRkT25Qcm9wcywgSGVsbUFkZE9uVXNlclByb3BzIH0gZnJvbSBcIi4uL2hlbG0tYWRkb25cIjtcbmltcG9ydCB7IENsdXN0ZXJJbmZvIH0gZnJvbSAnLi4vLi4vc3BpL3R5cGVzJztcbmltcG9ydCB7IEhlbG1BZGRPbiB9IGZyb20gJy4uL2hlbG0tYWRkb24vaW5kZXgnO1xuaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSBcImNvbnN0cnVjdHNcIjtcbmltcG9ydCB7IHNldFBhdGggfSBmcm9tIFwiLi4vLi4vdXRpbHNcIjtcbmltcG9ydCB7IFZhbHVlcyB9IGZyb20gXCIuLi8uLi9zcGlcIjtcblxuLyoqXG4gKiBVc2VyIHByb3ZpZGVkIG9wdGlvbnMgZm9yIHRoZSBIZWxtIENoYXJ0XG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRmFsY29BZGRPblByb3BzIGV4dGVuZHMgSGVsbUFkZE9uVXNlclByb3BzIHtcbiAgICAvKipcbiAgICAgKiBWZXJzaW9uIG9mIHRoZSBoZWxtIGNoYXJ0IHRvIGRlcGxveVxuICAgICAqL1xuICAgIHZlcnNpb24/OiBzdHJpbmcsXG4gICAgLyoqXG4gICAgICogRW5hYmxlIEt1YmVybmV0ZXMgbWV0YSBkYXRhIGNvbGxlY3Rpb24gdmlhIGEgY29ubmVjdGlvbiB0byB0aGUgS3ViZXJuZXRlcyBBUEkgc2VydmVyXG4gICAgICovXG4gICAga3ViZXJuZXRlc1N1cHBvcnRFbmFibGVkPzogYm9vbGVhbixcbiAgICAvKipcbiAgICAgKiBFbmFibGUgZmFsY29zaWRla2ljayBkZXBsb3ltZW50XG4gICAgICovXG4gICAgZmFsY29TaWRla2lja0VuYWJsZWQ/OiBzdHJpbmcsXG4gICAgLyoqXG4gICAgICogRW5hYmxlIGZhbGNvc2lkZWtpY2sgd2VidWkgd2hpY2ggcHJvdmlkZXMgYSBzaW1wbGUgV2ViVUkgZm9yIGRpc3BsYXlpbmcgbGF0ZXN0IGV2ZW50cyBmcm9tIEZhbGNvLiBJdCB3b3JrcyBhcyBvdXRwdXQgZm9yIEZhbGNvc2lkZWtpY2suXG4gICAgICovXG4gICAgZmFsY29TaWRla2lja1dlYnVpRW5hYmxlZD86IHN0cmluZyxcbiAgICAvKipcbiAgICAgKiBFbmFibGUgYXVkaXQgbG9ncyBmb3IgRmFsY28gXG4gICAgICovXG4gICAgYXVkaXRMb2dzRW5hYmxlZD86IHN0cmluZyxcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgbmFtZXNwYWNlIGZvciBGYWxjb1xuICAgICAqIEBkZWZhdWx0IGZhbGNvXG4gICAgICovXG4gICAgY3JlYXRlTmFtZXNwYWNlPzogYm9vbGVhbixcbn1cblxuLyoqXG4gKiBEZWZhdWx0IHByb3BzIHRvIGJlIHVzZWQgd2hlbiBjcmVhdGluZyB0aGUgSGVsbSBjaGFydFxuICovXG4gY29uc3QgZGVmYXVsdFByb3BzOiBIZWxtQWRkT25Qcm9wcyAmIEZhbGNvQWRkT25Qcm9wcyA9IHtcbiAgICBuYW1lOiBcImJsdWVwcmludHMtZmFsY28tYWRkb25cIixcbiAgICBuYW1lc3BhY2U6IFwiZmFsY29cIixcbiAgICBjaGFydDogXCJmYWxjb1wiLFxuICAgIHZlcnNpb246IFwiMi4wLjE1XCIsXG4gICAgcmVsZWFzZTogXCJmYWxjb1wiLFxuICAgIHJlcG9zaXRvcnk6ICBcImh0dHBzOi8vZmFsY29zZWN1cml0eS5naXRodWIuaW8vY2hhcnRzXCIsXG4gICAgY3JlYXRlTmFtZXNwYWNlOiB0cnVlLFxuICAgIHZhbHVlczoge31cbn07XG5cbi8qKlxuICogVGhpcyBhZGQtb24gaXMgY3VycmVudGx5IG5vdCBzdXBwb3J0ZWQuIEl0IHdpbGwgYXBwbHkgdGhlIGxhdGVzdCBmYWxjbyBoZWxtIGNoYXJ0IGJ1dCB0aGUgbGF0ZXN0IEFNSSBkb2VzIG5vdCBoYXZlIHN0b2NrIGRyaXZlciBzdXBwb3J0ZWQgYW5kXG4gKiBkcml2ZXIgYnVpbGQgaW4gdGhlIGluaXQgZmFpbHMgYXRtLiBcbiAqL1xuZXhwb3J0IGNsYXNzIEZhbGNvQWRkT24gZXh0ZW5kcyBIZWxtQWRkT24ge1xuXG4gICAgcmVhZG9ubHkgb3B0aW9uczogRmFsY29BZGRPblByb3BzO1xuXG4gICAgY29uc3RydWN0b3IocHJvcHM/OiBGYWxjb0FkZE9uUHJvcHMpIHtcbiAgICAgICAgc3VwZXIoey4uLmRlZmF1bHRQcm9wcywgLi4ucHJvcHN9KTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gdGhpcy5wcm9wcyBhcyBGYWxjb0FkZE9uUHJvcHM7XG4gICAgfVxuXG4gICAgZGVwbG95KGNsdXN0ZXJJbmZvOiBDbHVzdGVySW5mbyk6IFByb21pc2U8Q29uc3RydWN0PiB7XG4gICAgICAgIGxldCB2YWx1ZXM6IFZhbHVlcyA9IHBvcHVsYXRlVmFsdWVzKHRoaXMub3B0aW9ucyk7XG4gICAgICAgIGNvbnN0IGNoYXJ0ID0gdGhpcy5hZGRIZWxtQ2hhcnQoY2x1c3RlckluZm8sIHZhbHVlcyk7XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShjaGFydCk7XG4gICAgfVxufVxuXG4vKipcbiAqIHBvcHVsYXRlVmFsdWVzIHBvcHVsYXRlcyB0aGUgYXBwcm9wcmlhdGUgdmFsdWVzIHVzZWQgdG8gY3VzdG9taXplIHRoZSBIZWxtIGNoYXJ0XG4gKiBAcGFyYW0gaGVsbU9wdGlvbnMgVXNlciBwcm92aWRlZCB2YWx1ZXMgdG8gY3VzdG9taXplIHRoZSBjaGFydFxuICovXG5mdW5jdGlvbiBwb3B1bGF0ZVZhbHVlcyhoZWxtT3B0aW9uczogRmFsY29BZGRPblByb3BzKTogVmFsdWVzIHtcbiAgICBjb25zdCB2YWx1ZXMgPSBoZWxtT3B0aW9ucy52YWx1ZXMgPz8ge307XG5cbiAgICBzZXRQYXRoKHZhbHVlcywgXCJrdWJlcm5ldGVzLnN1cHBvcnQuZW5hYmxlZFwiLCAgaGVsbU9wdGlvbnMua3ViZXJuZXRlc1N1cHBvcnRFbmFibGVkID8/IHRydWUpO1xuICAgIHNldFBhdGgodmFsdWVzLCBcImZhbGNvLnNpZGVraWNrLmVuYWJsZWRcIiwgIGhlbG1PcHRpb25zLmZhbGNvU2lkZWtpY2tFbmFibGVkID8/IHRydWUpO1xuICAgIHNldFBhdGgodmFsdWVzLCBcImZhbGNvLnNpZGVraWNrLndlYnVpLmVuYWJsZWRcIiwgIGhlbG1PcHRpb25zLmZhbGNvU2lkZWtpY2tXZWJ1aUVuYWJsZWQgPz8gdHJ1ZSk7XG4gICAgc2V0UGF0aCh2YWx1ZXMsIFwiYXVkaXQubG9ncy5lbmFibGVkXCIsICBoZWxtT3B0aW9ucy5hdWRpdExvZ3NFbmFibGVkID8/IHRydWUpO1xuXG4gICAgcmV0dXJuIHZhbHVlcztcbn1cbiJdfQ==