"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IstioControlPlaneAddOn = void 0;
const ts_deepmerge_1 = require("ts-deepmerge");
const helm_addon_1 = require("../helm-addon");
const utils_1 = require("../../utils");
const defaultProps = {
    name: "istiod",
    release: "istiod",
    namespace: "istio-system",
    chart: "istiod",
    version: "1.14.3",
    repository: "https://istio-release.storage.googleapis.com/charts"
};
class IstioControlPlaneAddOn extends helm_addon_1.HelmAddOn {
    constructor(props) {
        super({ ...defaultProps, ...props });
    }
    deploy(clusterInfo) {
        var _a;
        const cluster = clusterInfo.cluster;
        let values = {
            awsRegion: cluster.stack.region,
        };
        values = (0, ts_deepmerge_1.default)(values, (_a = this.props.values) !== null && _a !== void 0 ? _a : {});
        const chart = this.addHelmChart(clusterInfo, values);
        return Promise.resolve(chart);
    }
}
__decorate([
    (0, utils_1.dependable)('IstioBaseAddOn')
], IstioControlPlaneAddOn.prototype, "deploy", null);
exports.IstioControlPlaneAddOn = IstioControlPlaneAddOn;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvYWRkb25zL2lzdGlvLWNvbnRyb2wtcGxhbmUvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQ0EsK0NBQWlDO0FBRWpDLDhDQUE4RDtBQUM5RCx1Q0FBeUM7QUFPekMsTUFBTSxZQUFZLEdBQUc7SUFDakIsSUFBSSxFQUFFLFFBQVE7SUFDZCxPQUFPLEVBQUUsUUFBUTtJQUNqQixTQUFTLEVBQUUsY0FBYztJQUN6QixLQUFLLEVBQUUsUUFBUTtJQUNmLE9BQU8sRUFBRSxRQUFRO0lBQ2pCLFVBQVUsRUFBRSxxREFBcUQ7Q0FDcEUsQ0FBQztBQUVGLE1BQWEsc0JBQXVCLFNBQVEsc0JBQVM7SUFFakQsWUFBWSxLQUFtQztRQUMzQyxLQUFLLENBQUMsRUFBRSxHQUFHLFlBQVksRUFBRSxHQUFHLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDekMsQ0FBQztJQUdELE1BQU0sQ0FBQyxXQUF3Qjs7UUFFM0IsTUFBTSxPQUFPLEdBQUcsV0FBVyxDQUFDLE9BQU8sQ0FBQztRQUVwQyxJQUFJLE1BQU0sR0FBaUI7WUFDdkIsU0FBUyxFQUFFLE9BQU8sQ0FBQyxLQUFLLENBQUMsTUFBTTtTQUNsQyxDQUFDO1FBRUYsTUFBTSxHQUFHLElBQUEsc0JBQUssRUFBQyxNQUFNLEVBQUUsTUFBQSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sbUNBQUksRUFBRSxDQUFDLENBQUM7UUFFaEQsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDckQsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2xDLENBQUM7Q0FDSjtBQWJHO0lBREMsSUFBQSxrQkFBVSxFQUFDLGdCQUFnQixDQUFDO29EQWE1QjtBQW5CTCx3REFvQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tIFwiY29uc3RydWN0c1wiO1xuaW1wb3J0IG1lcmdlIGZyb20gXCJ0cy1kZWVwbWVyZ2VcIjtcbmltcG9ydCB7IENsdXN0ZXJJbmZvIH0gZnJvbSBcIi4uLy4uL3NwaVwiO1xuaW1wb3J0IHsgSGVsbUFkZE9uLCBIZWxtQWRkT25Vc2VyUHJvcHMgfSBmcm9tIFwiLi4vaGVsbS1hZGRvblwiO1xuaW1wb3J0IHsgZGVwZW5kYWJsZSB9IGZyb20gJy4uLy4uL3V0aWxzJztcbmltcG9ydCB7IFZhbHVlc1NjaGVtYSB9IGZyb20gXCIuL3ZhbHVlc1wiO1xuXG5leHBvcnQgaW50ZXJmYWNlIElzdGlvQ29udHJvbFBsYW5lQWRkT25Qcm9wcyBleHRlbmRzIEhlbG1BZGRPblVzZXJQcm9wcyB7XG4gICAgdmFsdWVzPzogVmFsdWVzU2NoZW1hXG59XG5cbmNvbnN0IGRlZmF1bHRQcm9wcyA9IHtcbiAgICBuYW1lOiBcImlzdGlvZFwiLFxuICAgIHJlbGVhc2U6IFwiaXN0aW9kXCIsXG4gICAgbmFtZXNwYWNlOiBcImlzdGlvLXN5c3RlbVwiLFxuICAgIGNoYXJ0OiBcImlzdGlvZFwiLFxuICAgIHZlcnNpb246IFwiMS4xNC4zXCIsXG4gICAgcmVwb3NpdG9yeTogXCJodHRwczovL2lzdGlvLXJlbGVhc2Uuc3RvcmFnZS5nb29nbGVhcGlzLmNvbS9jaGFydHNcIlxufTtcblxuZXhwb3J0IGNsYXNzIElzdGlvQ29udHJvbFBsYW5lQWRkT24gZXh0ZW5kcyBIZWxtQWRkT24ge1xuXG4gICAgY29uc3RydWN0b3IocHJvcHM/OiBJc3Rpb0NvbnRyb2xQbGFuZUFkZE9uUHJvcHMpIHtcbiAgICAgICAgc3VwZXIoeyAuLi5kZWZhdWx0UHJvcHMsIC4uLnByb3BzIH0pO1xuICAgIH1cblxuICAgIEBkZXBlbmRhYmxlKCdJc3Rpb0Jhc2VBZGRPbicpXG4gICAgZGVwbG95KGNsdXN0ZXJJbmZvOiBDbHVzdGVySW5mbyk6IFByb21pc2U8Q29uc3RydWN0PiB7XG5cbiAgICAgICAgY29uc3QgY2x1c3RlciA9IGNsdXN0ZXJJbmZvLmNsdXN0ZXI7XG5cbiAgICAgICAgbGV0IHZhbHVlczogVmFsdWVzU2NoZW1hID0ge1xuICAgICAgICAgICAgYXdzUmVnaW9uOiBjbHVzdGVyLnN0YWNrLnJlZ2lvbixcbiAgICAgICAgfTtcblxuICAgICAgICB2YWx1ZXMgPSBtZXJnZSh2YWx1ZXMsIHRoaXMucHJvcHMudmFsdWVzID8/IHt9KTtcblxuICAgICAgICBjb25zdCBjaGFydCA9IHRoaXMuYWRkSGVsbUNoYXJ0KGNsdXN0ZXJJbmZvLCB2YWx1ZXMpO1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGNoYXJ0KTtcbiAgICB9XG59XG5cbiJdfQ==