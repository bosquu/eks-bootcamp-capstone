"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ArgoCDAddOn = void 0;
const assert = require("assert");
const bcrypt = require("bcrypt");
const dot = require("dot-object");
const ts_deepmerge_1 = require("ts-deepmerge");
const __1 = require("..");
const utils_1 = require("../../utils");
const helm_addon_1 = require("../helm-addon");
const application_1 = require("./application");
const manifest_utils_1 = require("./manifest-utils");
/**
 * Defaults options for the add-on
 */
const defaultProps = {
    namespace: "argocd",
    version: '4.10.5',
    chart: "argo-cd",
    release: "blueprints-addon-argocd",
    repository: "https://argoproj.github.io/argo-helm"
};
/**
 * Implementation of ArgoCD add-on and post deployment hook.
 */
class ArgoCDAddOn {
    constructor(props) {
        this.options = { ...defaultProps, ...props };
        helm_addon_1.HelmAddOn.validateVersion({
            chart: this.options.chart,
            version: this.options.version,
            repository: this.options.repository
        });
    }
    generate(clusterInfo, deployment, wave = 0) {
        const promise = clusterInfo.getScheduledAddOn('ArgoCDAddOn');
        if (promise === undefined) {
            throw new Error("ArgoCD addon must be registered before creating Argo managed add-ons for helm applications");
        }
        const manifest = new application_1.ArgoApplication(this.options.bootstrapRepo).generate(deployment, wave);
        const construct = clusterInfo.cluster.addManifest(deployment.name, manifest);
        promise.then(chart => {
            construct.node.addDependency(chart);
        });
        return construct;
    }
    /**
     * Implementation of the add-on contract deploy method.
    */
    async deploy(clusterInfo) {
        var _a, _b;
        const namespace = (0, utils_1.createNamespace)(this.options.namespace, clusterInfo.cluster, true);
        const sa = this.createServiceAccount(clusterInfo);
        sa.node.addDependency(namespace);
        const defaultValues = {};
        dot.set("server.serviceAccount.create", false, defaultValues);
        const secrets = [];
        if ((_a = this.options.bootstrapRepo) === null || _a === void 0 ? void 0 : _a.credentialsSecretName) {
            const repo = this.options.bootstrapRepo;
            secrets.push((0, manifest_utils_1.createSecretRef)(repo.credentialsType, repo.credentialsSecretName));
        }
        if (this.options.adminPasswordSecretName) {
            const adminSecret = await this.createAdminSecret(clusterInfo.cluster.stack.region);
            dot.set("configs.secret.argocdServerAdminPassword", adminSecret, defaultValues, true);
        }
        let secretProviderClass;
        if (secrets.length > 0) {
            secretProviderClass = new __1.SecretProviderClass(clusterInfo, sa, 'blueprints-secret', ...secrets);
            dot.set('server', secretProviderClass.getVolumeMounts('blueprints-secret-inline'), defaultValues, true);
        }
        if (this.options.bootstrapRepo) {
            const repo = this.options.bootstrapRepo;
            dot.set("configs.repositories.bootstrap", { url: repo.repoUrl }, defaultValues, true);
        }
        let values = (0, ts_deepmerge_1.default)(defaultValues, (_b = this.options.values) !== null && _b !== void 0 ? _b : {});
        this.chartNode = clusterInfo.cluster.addHelmChart("argocd-addon", {
            chart: this.options.chart,
            release: this.options.release,
            repository: this.options.repository,
            version: this.options.version,
            namespace: this.options.namespace,
            values: values
        });
        this.chartNode.node.addDependency(sa);
        if (secretProviderClass) {
            secretProviderClass.addDependent(this.chartNode);
        }
        return this.chartNode;
    }
    /**
     * Post deployment step is used to create a bootstrap repository if options are provided for the add-on.
     * @param clusterInfo
     * @param teams
     * @returns
     */
    postDeploy(clusterInfo, teams) {
        var _a, _b;
        assert(teams != null);
        const appRepo = this.options.bootstrapRepo;
        if (appRepo) {
            this.generate(clusterInfo, {
                name: (_a = appRepo.name) !== null && _a !== void 0 ? _a : "bootstrap-apps",
                namespace: this.options.namespace,
                repository: appRepo,
                values: (_b = this.options.bootstrapValues) !== null && _b !== void 0 ? _b : {}
            });
        }
        this.chartNode = undefined;
    }
    /**
     * @returns bcrypt hash of the admin secret provided from the AWS secret manager.
     */
    async createAdminSecret(region) {
        const secretValue = await (0, utils_1.getSecretValue)(this.options.adminPasswordSecretName, region);
        return bcrypt.hash(secretValue, 10);
    }
    /**
     * Creates a service account that can access secrets
     * @param clusterInfo
     * @returns
     */
    createServiceAccount(clusterInfo) {
        const sa = clusterInfo.cluster.addServiceAccount('argo-cd-server', {
            name: "argocd-server",
            namespace: this.options.namespace
        });
        return sa;
    }
}
exports.ArgoCDAddOn = ArgoCDAddOn;
//# sourceMappingURL=data:application/json;base64,