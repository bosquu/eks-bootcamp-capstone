"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KubectlProvider = void 0;
const aws_eks_1 = require("aws-cdk-lib/aws-eks");
/**
 * Kubectl provider for the add-ons and teams that is capable of helm and generic manifest deployments.
 * It exposes extension mechanism and central points for logging, stack output, extension of functionality.
 */
class KubectlProvider {
    constructor(clusterInfo) {
        this.clusterInfo = clusterInfo;
    }
    addHelmChart(props) {
        return KubectlProvider.applyHelmDeployment(this.clusterInfo, props);
    }
    addManifest(props) {
        return KubectlProvider.applyManifestDeployment(this.clusterInfo, props);
    }
}
exports.KubectlProvider = KubectlProvider;
KubectlProvider.applyHelmDeployment = function (clusterInfo, props) {
    return clusterInfo.cluster.addHelmChart(props.name, {
        repository: props.repository,
        namespace: props.namespace,
        createNamespace: props.createNamespace,
        chart: props.chart,
        version: props.version,
        release: props.release,
        timeout: props.timeout,
        wait: props.wait,
        values: props.values
    });
};
/**
 * Simple template provider for manifest based add-ons.
 * Replaces values in format {{key}} with the values passed in as values.
 * @param document where templated parameters must be replaced
 * @param values values to replace (e.g. region will be passed as "region: us-west-1" and any occurrence of {{region}} will be replaced)
 * @returns
 */
KubectlProvider.applyManifestTemplate = function (document, values) {
    const valueMap = new Map(Object.entries(values));
    let data = JSON.stringify(document);
    valueMap.forEach((value, key) => {
        data = data.replace(new RegExp(`{{${key}}}`, 'g'), value);
    });
    return JSON.parse(data);
};
KubectlProvider.applyManifestDeployment = function (clusterInfo, props) {
    const manifestDoc = KubectlProvider.applyManifestTemplate(props.manifest, props.values);
    return new aws_eks_1.KubernetesManifest(clusterInfo.cluster, props.name, {
        cluster: clusterInfo.cluster,
        manifest: manifestDoc,
        overwrite: true
    });
};
//# sourceMappingURL=data:application/json;base64,