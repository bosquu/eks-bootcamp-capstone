"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HelmAddOn = exports.HelmAddonPropsConstraints = void 0;
const helm_version_checker_1 = require("./helm-version-checker");
const kubectl_provider_1 = require("./kubectl-provider");
const utils = require("../../utils");
class HelmAddonPropsConstraints {
    constructor() {
        /**
        * chart can be no less than 1 character long, and no greater than 63 characters long due to DNS system limitations.
        * https://helm.sh/docs/chart_template_guide/getting_started/#:~:text=TIP%3A%20The%20name%3A%20field%20is,are%20limited%20to%2053%20characters
        */
        this.chart = new utils.StringConstraint(1, 63);
        /**
        * name can be no less than 1 character long, and no greater than 63 characters long due to DNS system limitations.
        * https://helm.sh/docs/chart_template_guide/getting_started/#:~:text=TIP%3A%20The%20name%3A%20field%20is,are%20limited%20to%2053%20characters
        */
        this.name = new utils.StringConstraint(1, 63);
        /**
        * namespace can be no less than 1 character long, and no greater than 63 characters long due to DNS system limitations.
        * https://helm.sh/docs/chart_template_guide/getting_started/#:~:text=TIP%3A%20The%20name%3A%20field%20is,are%20limited%20to%2053%20characters
        */
        this.namespace = new utils.StringConstraint(1, 63);
        /**
        * release can be no less than 1 character long, and no greater than 53 characters long.
        * https://helm.sh/docs/chart_template_guide/getting_started/#:~:text=TIP%3A%20The%20name%3A%20field%20is,are%20limited%20to%2053%20characters
        */
        this.release = new utils.StringConstraint(1, 53);
        /**
        * repository can be no less than 0 characters long, and no greater than 4096 characters long. It also must follow a URL format.
        * https://docs.aws.amazon.com/connect/latest/APIReference/API_UrlReference.html
        */
        this.repository = new utils.UrlStringConstraint(0, 4096);
        /**
        * version can be no less than 1 character long, and no greater than 63 characters long due to DNS system limitations.
        * https://helm.sh/docs/chart_template_guide/getting_started/#:~:text=TIP%3A%20The%20name%3A%20field%20is,are%20limited%20to%2053%20characters
        */
        this.version = new utils.StringConstraint(1, 63);
    }
}
exports.HelmAddonPropsConstraints = HelmAddonPropsConstraints;
class HelmAddOn {
    constructor(props) {
        this.props = utils.cloneDeep(props); // avoids polution when reusing the same props across stacks, such as values
        utils.validateConstraints(new HelmAddonPropsConstraints, HelmAddOn.name, props);
        HelmAddOn.validateVersion(props);
    }
    static validateVersion(helmChart) {
        if (HelmAddOn.validateHelmVersions && !helmChart.skipVersionValidation) {
            const result = (0, helm_version_checker_1.checkHelmChartVersion)(helmChart);
            if (this.failOnVersionValidation && !result.latestVersion) {
                throw new Error(`Helm version validation failed for ${helmChart.chart}. 
                    Used version ${helmChart.version}, latest version: ${result.highestVersion}`);
            }
        }
    }
    /**
     * Deploys the helm chart in the cluster.
     * @param clusterInfo
     * @param values
     * @param createNamespace
     * @param wait
     * @param timeout
     * @returns
     */
    addHelmChart(clusterInfo, values, createNamespace, wait, timeout) {
        const kubectlProvider = new kubectl_provider_1.KubectlProvider(clusterInfo);
        values = values !== null && values !== void 0 ? values : {};
        const chart = { ...this.props, ...{ values, wait, timeout, createNamespace } };
        return kubectlProvider.addHelmChart(chart);
    }
}
exports.HelmAddOn = HelmAddOn;
HelmAddOn.validateHelmVersions = false;
HelmAddOn.failOnVersionValidation = false;
//# sourceMappingURL=data:application/json;base64,