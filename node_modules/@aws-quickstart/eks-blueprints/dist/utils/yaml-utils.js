"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.serializeYaml = exports.loadExternalYaml = exports.loadYaml = exports.readYamlDocument = exports.applyYamlFromDir = void 0;
const fs = require("fs");
const yaml = require("js-yaml");
/**
 * Applies all manifests from a directory. Note: The manifests are not checked,
 * so user must ensure the manifests have the correct namespaces.
 * @param dir
 * @param cluster
 * @param namespaceManifest
 */
function applyYamlFromDir(dir, cluster, namespaceManifest) {
    fs.readdirSync(dir, { encoding: 'utf8' }).forEach((file, index) => {
        if (file.split('.').pop() == 'yaml') {
            const data = fs.readFileSync(dir + file, 'utf8');
            if (data != undefined) {
                yaml.loadAll(data, function (item) {
                    const resources = cluster.addManifest(file.substring(0, file.length - 5) + index, item);
                    resources.node.addDependency(namespaceManifest);
                });
            }
        }
    });
}
exports.applyYamlFromDir = applyYamlFromDir;
function readYamlDocument(path) {
    try {
        const doc = fs.readFileSync(path, 'utf8');
        return doc;
    }
    catch (e) {
        console.log(e + ' for path: ' + path);
        throw e;
    }
}
exports.readYamlDocument = readYamlDocument;
function loadYaml(document) {
    return yaml.load(document);
}
exports.loadYaml = loadYaml;
function loadExternalYaml(url) {
    /* eslint-disable */
    const request = require('sync-request'); // moved away from import as it is causing open handles that prevents jest from completion
    const response = request('GET', url);
    return yaml.loadAll(response.getBody().toString());
}
exports.loadExternalYaml = loadExternalYaml;
function serializeYaml(document) {
    return yaml.dump(document);
}
exports.serializeYaml = serializeYaml;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieWFtbC11dGlscy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi91dGlscy95YW1sLXV0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUVBLHlCQUF5QjtBQUN6QixnQ0FBZ0M7QUFHaEM7Ozs7OztHQU1HO0FBQ0gsU0FBZ0IsZ0JBQWdCLENBQUMsR0FBVyxFQUFFLE9BQW9CLEVBQUUsaUJBQXFDO0lBQ3JHLEVBQUUsQ0FBQyxXQUFXLENBQUMsR0FBRyxFQUFFLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxFQUFFO1FBQzlELElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxNQUFNLEVBQUU7WUFDakMsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyxHQUFHLEdBQUcsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQ2pELElBQUksSUFBSSxJQUFJLFNBQVMsRUFBRTtnQkFDbkIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsVUFBVSxJQUFJO29CQUM3QixNQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEdBQUcsS0FBSyxFQUF5QixJQUFJLENBQUMsQ0FBQztvQkFDL0csU0FBUyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsaUJBQWlCLENBQUMsQ0FBQztnQkFDcEQsQ0FBQyxDQUFDLENBQUM7YUFDTjtTQUNKO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDO0FBWkQsNENBWUM7QUFFRCxTQUFnQixnQkFBZ0IsQ0FBQyxJQUFZO0lBQ3pDLElBQUk7UUFDQSxNQUFNLEdBQUcsR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztRQUMxQyxPQUFPLEdBQUcsQ0FBQztLQUNkO0lBQUMsT0FBTyxDQUFDLEVBQUU7UUFDUixPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxhQUFhLEdBQUcsSUFBSSxDQUFDLENBQUM7UUFDdEMsTUFBTSxDQUFDLENBQUM7S0FDWDtBQUNMLENBQUM7QUFSRCw0Q0FRQztBQUdELFNBQWdCLFFBQVEsQ0FBQyxRQUFnQjtJQUNyQyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDL0IsQ0FBQztBQUZELDRCQUVDO0FBRUQsU0FBZ0IsZ0JBQWdCLENBQUMsR0FBVztJQUN4QyxvQkFBb0I7SUFDcEIsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsMEZBQTBGO0lBQ25JLE1BQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDckMsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0FBQ3ZELENBQUM7QUFMRCw0Q0FLQztBQUVELFNBQWdCLGFBQWEsQ0FBQyxRQUFhO0lBQ3ZDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUMvQixDQUFDO0FBRkQsc0NBRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBla3MgZnJvbSAnYXdzLWNkay1saWIvYXdzLWVrcyc7XG5pbXBvcnQgeyBLdWJlcm5ldGVzTWFuaWZlc3QgfSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtZWtzJztcbmltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzJztcbmltcG9ydCAqIGFzIHlhbWwgZnJvbSAnanMteWFtbCc7XG5cblxuLyoqXG4gKiBBcHBsaWVzIGFsbCBtYW5pZmVzdHMgZnJvbSBhIGRpcmVjdG9yeS4gTm90ZTogVGhlIG1hbmlmZXN0cyBhcmUgbm90IGNoZWNrZWQsIFxuICogc28gdXNlciBtdXN0IGVuc3VyZSB0aGUgbWFuaWZlc3RzIGhhdmUgdGhlIGNvcnJlY3QgbmFtZXNwYWNlcy4gXG4gKiBAcGFyYW0gZGlyIFxuICogQHBhcmFtIGNsdXN0ZXIgXG4gKiBAcGFyYW0gbmFtZXNwYWNlTWFuaWZlc3QgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhcHBseVlhbWxGcm9tRGlyKGRpcjogc3RyaW5nLCBjbHVzdGVyOiBla3MuQ2x1c3RlciwgbmFtZXNwYWNlTWFuaWZlc3Q6IEt1YmVybmV0ZXNNYW5pZmVzdCk6IHZvaWQge1xuICAgIGZzLnJlYWRkaXJTeW5jKGRpciwgeyBlbmNvZGluZzogJ3V0ZjgnIH0pLmZvckVhY2goKGZpbGUsIGluZGV4KSA9PiB7XG4gICAgICAgIGlmIChmaWxlLnNwbGl0KCcuJykucG9wKCkgPT0gJ3lhbWwnKSB7XG4gICAgICAgICAgICBjb25zdCBkYXRhID0gZnMucmVhZEZpbGVTeW5jKGRpciArIGZpbGUsICd1dGY4Jyk7XG4gICAgICAgICAgICBpZiAoZGF0YSAhPSB1bmRlZmluZWQpIHsgIFxuICAgICAgICAgICAgICAgIHlhbWwubG9hZEFsbChkYXRhLCBmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXNvdXJjZXMgPSBjbHVzdGVyLmFkZE1hbmlmZXN0KGZpbGUuc3Vic3RyaW5nKDAsIGZpbGUubGVuZ3RoIC0gNSkgKyBpbmRleCwgPFJlY29yZDxzdHJpbmcsIGFueT5bXT5pdGVtKTtcbiAgICAgICAgICAgICAgICAgICAgcmVzb3VyY2VzLm5vZGUuYWRkRGVwZW5kZW5jeShuYW1lc3BhY2VNYW5pZmVzdCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlYWRZYW1sRG9jdW1lbnQocGF0aDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBkb2MgPSBmcy5yZWFkRmlsZVN5bmMocGF0aCwgJ3V0ZjgnKTtcbiAgICAgICAgcmV0dXJuIGRvYztcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGUgKyAnIGZvciBwYXRoOiAnICsgcGF0aCk7XG4gICAgICAgIHRocm93IGU7XG4gICAgfVxufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBsb2FkWWFtbChkb2N1bWVudDogc3RyaW5nKTogYW55IHtcbiAgICByZXR1cm4geWFtbC5sb2FkKGRvY3VtZW50KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxvYWRFeHRlcm5hbFlhbWwodXJsOiBzdHJpbmcpOiBhbnkge1xuICAgIC8qIGVzbGludC1kaXNhYmxlICovXG4gICAgY29uc3QgcmVxdWVzdCA9IHJlcXVpcmUoJ3N5bmMtcmVxdWVzdCcpOyAvLyBtb3ZlZCBhd2F5IGZyb20gaW1wb3J0IGFzIGl0IGlzIGNhdXNpbmcgb3BlbiBoYW5kbGVzIHRoYXQgcHJldmVudHMgamVzdCBmcm9tIGNvbXBsZXRpb25cbiAgICBjb25zdCByZXNwb25zZSA9IHJlcXVlc3QoJ0dFVCcsIHVybCk7XG4gICAgcmV0dXJuIHlhbWwubG9hZEFsbChyZXNwb25zZS5nZXRCb2R5KCkudG9TdHJpbmcoKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXJpYWxpemVZYW1sKGRvY3VtZW50OiBhbnkpOiBzdHJpbmcge1xuICAgIHJldHVybiB5YW1sLmR1bXAoZG9jdW1lbnQpO1xufSJdfQ==