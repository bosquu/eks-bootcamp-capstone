"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateConstraints = exports.ArrayConstraint = exports.NumberConstraint = exports.UrlStringConstraint = exports.StringConstraint = void 0;
const zod_1 = require("zod");
/**
 * This validates if the given string (value) is within the bounds of min to max inclusive. If not a detailed Zod Error is thrown also utilizing the identifier for context.
 */
class StringConstraint {
    constructor(min, max) {
        this.min = min;
        this.max = max;
    }
    validate(key, value, identifier) {
        var _a, _b;
        if (value != undefined)
            zod_1.z.string()
                .min((_a = this.min) !== null && _a !== void 0 ? _a : 0, { message: `${key} (${identifier}: ${value}) must be no less than ${this.min} characters long.` })
                .max((_b = this.max) !== null && _b !== void 0 ? _b : 63, { message: `${key} (${identifier}: ${value}) must be no more than ${this.max} characters long.` })
                .parse(value);
    }
}
exports.StringConstraint = StringConstraint;
/**
 * This is the same as StringConstraint, but also checks if the given string is a correctly formatted URL. If not a detailed Zod Error is thrown also utilizing the identifier for context.
 */
class UrlStringConstraint {
    constructor(min, max) {
        this.min = min;
        this.max = max;
    }
    validate(key, value, identifier) {
        var _a, _b;
        if (value != undefined) {
            zod_1.z.string().url({ message: `${key} (${identifier}: ${value}) must be a URL formatted correctly.` }).parse(value);
            zod_1.z.string()
                .min((_a = this.min) !== null && _a !== void 0 ? _a : 0, { message: `${key} (${identifier}: ${value}) must be a URL no less than ${this.min} characters long.` })
                .max((_b = this.max) !== null && _b !== void 0 ? _b : 100, { message: `${key} (${identifier}: ${value}) must be a URL no more than ${this.max} characters long.` })
                .parse(value);
        }
    }
}
exports.UrlStringConstraint = UrlStringConstraint;
/**
 * This class checks if the given number (value) is within the bounds of the given min and max inclusive number bounds. If not a detailed Zod Error is thrown also utilizing the identifier for context.
 */
class NumberConstraint {
    constructor(min, max) {
        this.min = min;
        this.max = max;
    }
    validate(key, value, identifier) {
        var _a, _b;
        if (value != undefined)
            zod_1.z.number()
                .gte((_a = this.min) !== null && _a !== void 0 ? _a : 1, { message: `${key} (${identifier}: ${value}) must be no less than ${this.min} nodes.` })
                .lte((_b = this.max) !== null && _b !== void 0 ? _b : 3, { message: `${key} (${identifier}: ${value}) must be no more than ${this.max} nodes.` })
                .parse(value);
    }
}
exports.NumberConstraint = NumberConstraint;
/**
 * This works just like NumberConstraint but checks the length of the given value for an expected array. If not a detailed Zod Error is thrown also utilizing the identifier for context.
 */
class ArrayConstraint {
    constructor(min, max) {
        this.min = min;
        this.max = max;
    }
    validate(key, value, identifier) {
        var _a, _b;
        if (value != undefined)
            zod_1.z.number()
                .gte((_a = this.min) !== null && _a !== void 0 ? _a : 1, { message: `${key} (${identifier} of length: ${value.length}) must be no less than ${this.min} node groups.` })
                .lte((_b = this.max) !== null && _b !== void 0 ? _b : 3, { message: `${key} (${identifier} of length: ${value.length}) must be no more than ${this.max} node groups.` })
                .parse(value.length);
    }
}
exports.ArrayConstraint = ArrayConstraint;
/**
 * This function validates the given object by the given constraints, and returns an error that uses the given context if needed.
 * @param constraints This is the keys of the object with specified values for validation.
 * @param context Object type name for error context purposes.
 * @param object The given object type, an array of or only a single object, to be validated.
 * @returns throws a Zod Error if validations are broken.
 */
function validateConstraints(constraints, context, ...object) {
    if (object != undefined)
        for (let i = 0; i < object.length; i++) {
            for (let k in constraints) {
                const constraint = constraints[k];
                constraint.validate(context + "." + k, object[i][k], k);
            }
        }
}
exports.validateConstraints = validateConstraints;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RyYWludHMtdXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvdXRpbHMvY29uc3RyYWludHMtdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsNkJBQXdCO0FBU3hCOztHQUVHO0FBQ0gsTUFBYSxnQkFBZ0I7SUFFekIsWUFBcUIsR0FBWSxFQUFXLEdBQVk7UUFBbkMsUUFBRyxHQUFILEdBQUcsQ0FBUztRQUFXLFFBQUcsR0FBSCxHQUFHLENBQVM7SUFBSSxDQUFDO0lBRTdELFFBQVEsQ0FBQyxHQUFXLEVBQUUsS0FBVSxFQUFFLFVBQWtCOztRQUVoRCxJQUFJLEtBQUssSUFBSSxTQUFTO1lBQ2xCLE9BQUMsQ0FBQyxNQUFNLEVBQUU7aUJBQ0wsR0FBRyxDQUFDLE1BQUEsSUFBSSxDQUFDLEdBQUcsbUNBQUksQ0FBQyxFQUFFLEVBQUUsT0FBTyxFQUFFLEdBQUcsR0FBRyxLQUFLLFVBQVUsS0FBSyxLQUFLLDBCQUEwQixJQUFJLENBQUMsR0FBRyxtQkFBbUIsRUFBRSxDQUFDO2lCQUNySCxHQUFHLENBQUMsTUFBQSxJQUFJLENBQUMsR0FBRyxtQ0FBSSxFQUFFLEVBQUUsRUFBRSxPQUFPLEVBQUUsR0FBRyxHQUFHLEtBQUssVUFBVSxLQUFLLEtBQUssMEJBQTBCLElBQUksQ0FBQyxHQUFHLG1CQUFtQixFQUFFLENBQUM7aUJBQ3RILEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMxQixDQUFDO0NBQ0o7QUFaRCw0Q0FZQztBQUVEOztHQUVHO0FBQ0gsTUFBYSxtQkFBbUI7SUFFNUIsWUFBcUIsR0FBWSxFQUFXLEdBQVk7UUFBbkMsUUFBRyxHQUFILEdBQUcsQ0FBUztRQUFXLFFBQUcsR0FBSCxHQUFHLENBQVM7SUFBSSxDQUFDO0lBRTdELFFBQVEsQ0FBQyxHQUFXLEVBQUUsS0FBVSxFQUFFLFVBQWtCOztRQUVoRCxJQUFJLEtBQUssSUFBSSxTQUFTLEVBQUU7WUFFcEIsT0FBQyxDQUFDLE1B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QUN2QixNQUFNLFVBQVUsR0FBZSxXQUFXLENBQUMsQ0FBQyxDQUFFLENBQUM7Z0JBQy9DLFVBQVUsQ0FBQyxRQUFRLENBQUMsT0FBTyxHQUFHLEdBQUcsR0FBRyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO2FBQzNEO1NBQ0o7QUFDVCxDQUFDO0FBVEQsa0RBU0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB6IH0gZnJvbSBcInpvZFwiO1xuXG4vKipcbiAqIFRoaXMgaXMgaW50ZXJmYWNlIGZvciB0aGUgY29uc3RyYWludHMgbmVlZGVkIHRvIHRlc3QgYXNraW5nIGZvciB0aGUga2V5IG5hbWUgb2YgdGhlIG9iamVjdCwgdGhlIHZhbHVlIGJlaW5nIHRlc3RlZCwgYW5kIGNvbnRleHQgZm9yIGRldGFpbGVkIFpvZCBlcnJvcnMuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ29uc3RyYWludCB7XG4gICAgdmFsaWRhdGUoa2V5OiBzdHJpbmcsIHZhbHVlOiBhbnksIGlkZW50aWZpZXI6IHN0cmluZyk6IGFueTtcbn1cblxuLyoqXG4gKiBUaGlzIHZhbGlkYXRlcyBpZiB0aGUgZ2l2ZW4gc3RyaW5nICh2YWx1ZSkgaXMgd2l0aGluIHRoZSBib3VuZHMgb2YgbWluIHRvIG1heCBpbmNsdXNpdmUuIElmIG5vdCBhIGRldGFpbGVkIFpvZCBFcnJvciBpcyB0aHJvd24gYWxzbyB1dGlsaXppbmcgdGhlIGlkZW50aWZpZXIgZm9yIGNvbnRleHQuXG4gKi9cbmV4cG9ydCBjbGFzcyBTdHJpbmdDb25zdHJhaW50IGltcGxlbWVudHMgQ29uc3RyYWludCB7XG5cbiAgICBjb25zdHJ1Y3RvcihyZWFkb25seSBtaW4/OiBudW1iZXIsIHJlYWRvbmx5IG1heD86IG51bWJlcikgeyB9XG5cbiAgICB2YWxpZGF0ZShrZXk6IHN0cmluZywgdmFsdWU6IGFueSwgaWRlbnRpZmllcjogc3RyaW5nKSB7XG5cbiAgICAgICAgaWYgKHZhbHVlICE9IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHouc3RyaW5nKClcbiAgICAgICAgICAgICAgICAubWluKHRoaXMubWluID8/IDAsIHsgbWVzc2FnZTogYCR7a2V5fSAoJHtpZGVudGlmaWVyfTogJHt2YWx1ZX0pIG11c3QgYmUgbm8gbGVzcyB0aGFuICR7dGhpcy5taW59IGNoYXJhY3RlcnMgbG9uZy5gIH0pXG4gICAgICAgICAgICAgICAgLm1heCh0aGlzLm1heCA/PyA2MywgeyBtZXNzYWdlOiBgJHtrZXl9ICgke2lkZW50aWZpZXJ9OiAke3ZhbHVlfSkgbXVzdCBiZSBubyBtb3JlIHRoYW4gJHt0aGlzLm1heH0gY2hhcmFjdGVycyBsb25nLmAgfSlcbiAgICAgICAgICAgICAgICAucGFyc2UodmFsdWUpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBUaGlzIGlzIHRoZSBzYW1lIGFzIFN0cmluZ0NvbnN0cmFpbnQsIGJ1dCBhbHNvIGNoZWNrcyBpZiB0aGUgZ2l2ZW4gc3RyaW5nIGlzIGEgY29ycmVjdGx5IGZvcm1hdHRlZCBVUkwuIElmIG5vdCBhIGRldGFpbGVkIFpvZCBFcnJvciBpcyB0aHJvd24gYWxzbyB1dGlsaXppbmcgdGhlIGlkZW50aWZpZXIgZm9yIGNvbnRleHQuXG4gKi9cbmV4cG9ydCBjbGFzcyBVcmxTdHJpbmdDb25zdHJhaW50IGltcGxlbWVudHMgU3RyaW5nQ29uc3RyYWludCB7XG5cbiAgICBjb25zdHJ1Y3RvcihyZWFkb25seSBtaW4/OiBudW1iZXIsIHJlYWRvbmx5IG1heD86IG51bWJlcikgeyB9XG5cbiAgICB2YWxpZGF0ZShrZXk6IHN0cmluZywgdmFsdWU6IGFueSwgaWRlbnRpZmllcjogc3RyaW5nKSB7XG5cbiAgICAgICAgaWYgKHZhbHVlICE9IHVuZGVmaW5lZCkge1xuXG4gICAgICAgICAgICB6LnN0cmluZygpLnVybCh7IG1lc3NhZ2U6IGAke2tleX0gKCR7aWRlbnRpZmllcn06ICR7dmFsdWV9KSBtdXN0IGJlIGEgVVJMIGZvcm1hdHRlZCBjb3JyZWN0bHkuYCB9KS5wYXJzZSh2YWx1ZSk7XG5cbiAgICAgICAgICAgIHouc3RyaW5nKClcbiAgICAgICAgICAgICAgICAubWluKHRoaXMubWluID8/IDAsIHsgbWVzc2FnZTogYCR7a2V5fSAoJHtpZGVudGlmaWVyfTogJHt2YWx1ZX0pIG11c3QgYmUgYSBVUkwgbm8gbGVzcyB0aGFuICR7dGhpcy5taW59IGNoYXJhY3RlcnMgbG9uZy5gIH0pXG4gICAgICAgICAgICAgICAgLm1heCh0aGlzLm1heCA/PyAxMDAsIHsgbWVzc2FnZTogYCR7a2V5fSAoJHtpZGVudGlmaWVyfTogJHt2YWx1ZX0pIG11c3QgYmUgYSBVUkwgbm8gbW9yZSB0aGFuICR7dGhpcy5tYXh9IGNoYXJhY3RlcnMgbG9uZy5gIH0pXG4gICAgICAgICAgICAgICAgLnBhcnNlKHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLyoqXG4gKiBUaGlzIGNsYXNzIGNoZWNrcyBpZiB0aGUgZ2l2ZW4gbnVtYmVyICh2YWx1ZSkgaXMgd2l0aGluIHRoZSBib3VuZHMgb2YgdGhlIGdpdmVuIG1pbiBhbmQgbWF4IGluY2x1c2l2ZSBudW1iZXIgYm91bmRzLiBJZiBub3QgYSBkZXRhaWxlZCBab2QgRXJyb3IgaXMgdGhyb3duIGFsc28gdXRpbGl6aW5nIHRoZSBpZGVudGlmaWVyIGZvciBjb250ZXh0LlxuICovXG5leHBvcnQgY2xhc3MgTnVtYmVyQ29uc3RyYWludCBpbXBsZW1lbnRzIENvbnN0cmFpbnQge1xuXG4gICAgY29uc3RydWN0b3IocmVhZG9ubHkgbWluPzogbnVtYmVyLCByZWFkb25seSBtYXg/OiBudW1iZXIpIHsgfVxuXG4gICAgdmFsaWRhdGUoa2V5OiBzdHJpbmcsIHZhbHVlOiBhbnksIGlkZW50aWZpZXI6IHN0cmluZykge1xuXG4gICAgICAgIGlmICh2YWx1ZSAhPSB1bmRlZmluZWQpXG4gICAgICAgICAgICB6Lm51bWJlcigpXG4gICAgICAgICAgICAgICAgLmd0ZSh0aGlzLm1pbiA/PyAxLCB7IG1lc3NhZ2U6IGAke2tleX0gKCR7aWRlbnRpZmllcn06ICR7dmFsdWV9KSBtdXN0IGJlIG5vIGxlc3MgdGhhbiAke3RoaXMubWlufSBub2Rlcy5gIH0pXG4gICAgICAgICAgICAgICAgLmx0ZSh0aGlzLm1heCA/PyAzLCB7IG1lc3NhZ2U6IGAke2tleX0gKCR7aWRlbnRpZmllcn06ICR7dmFsdWV9KSBtdXN0IGJlIG5vIG1vcmUgdGhhbiAke3RoaXMubWF4fSBub2Rlcy5gIH0pXG4gICAgICAgICAgICAgICAgLnBhcnNlKHZhbHVlKTtcbiAgICB9XG59XG5cbi8qKlxuICogVGhpcyB3b3JrcyBqdXN0IGxpa2UgTnVtYmVyQ29uc3RyYWludCBidXQgY2hlY2tzIHRoZSBsZW5ndGggb2YgdGhlIGdpdmVuIHZhbHVlIGZvciBhbiBleHBlY3RlZCBhcnJheS4gSWYgbm90IGEgZGV0YWlsZWQgWm9kIEVycm9yIGlzIHRocm93biBhbHNvIHV0aWxpemluZyB0aGUgaWRlbnRpZmllciBmb3IgY29udGV4dC5cbiAqL1xuZXhwb3J0IGNsYXNzIEFycmF5Q29uc3RyYWludCBpbXBsZW1lbnRzIENvbnN0cmFpbnQge1xuXG4gICAgY29uc3RydWN0b3IocmVhZG9ubHkgbWluPzogbnVtYmVyLCByZWFkb25seSBtYXg/OiBudW1iZXIpIHsgfVxuXG4gICAgdmFsaWRhdGUoa2V5OiBzdHJpbmcsIHZhbHVlOiBhbnksIGlkZW50aWZpZXI6IHN0cmluZykge1xuXG4gICAgICAgIGlmICh2YWx1ZSAhPSB1bmRlZmluZWQpXG4gICAgICAgICAgICB6Lm51bWJlcigpXG4gICAgICAgICAgICAgICAgLmd0ZSh0aGlzLm1pbiA/PyAxLCB7IG1lc3NhZ2U6IGAke2tleX0gKCR7aWRlbnRpZmllcn0gb2YgbGVuZ3RoOiAke3ZhbHVlLmxlbmd0aH0pIG11c3QgYmUgbm8gbGVzcyB0aGFuICR7dGhpcy5taW59IG5vZGUgZ3JvdXBzLmAgfSlcbiAgICAgICAgICAgICAgICAubHRlKHRoaXMubWF4ID8/IDMsIHsgbWVzc2FnZTogYCR7a2V5fSAoJHtpZGVudGlmaWVyfSBvZiBsZW5ndGg6ICR7dmFsdWUubGVuZ3RofSkgbXVzdCBiZSBubyBtb3JlIHRoYW4gJHt0aGlzLm1heH0gbm9kZSBncm91cHMuYCB9KVxuICAgICAgICAgICAgICAgIC5wYXJzZSh2YWx1ZS5sZW5ndGgpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBUaGUgdHlwZSB0aGF0IGRlcml2ZXMgZnJvbSBhIGdlbmVyaWMgaW5wdXQgc3RydWN0dXJlLCByZXRhaW5pbmcgdGhlIGtleXMuIEVuYWJsZXMgdG8gZGVmaW5lIG1hcHBpbmcgYmV0d2VlbiB0aGUgaW5wdXQgc3RydWN0dXJlIGtleXMgYW5kIGNvbnN0cmFpbnRzLlxuICovXG5leHBvcnQgdHlwZSBDb25zdHJhaW50c1R5cGU8VD4gPSBQYXJ0aWFsPFJlY29yZDxrZXlvZiBULCBDb25zdHJhaW50Pj47XG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiB2YWxpZGF0ZXMgdGhlIGdpdmVuIG9iamVjdCBieSB0aGUgZ2l2ZW4gY29uc3RyYWludHMsIGFuZCByZXR1cm5zIGFuIGVycm9yIHRoYXQgdXNlcyB0aGUgZ2l2ZW4gY29udGV4dCBpZiBuZWVkZWQuXG4gKiBAcGFyYW0gY29uc3RyYWludHMgVGhpcyBpcyB0aGUga2V5cyBvZiB0aGUgb2JqZWN0IHdpdGggc3BlY2lmaWVkIHZhbHVlcyBmb3IgdmFsaWRhdGlvbi5cbiAqIEBwYXJhbSBjb250ZXh0IE9iamVjdCB0eXBlIG5hbWUgZm9yIGVycm9yIGNvbnRleHQgcHVycG9zZXMuXG4gKiBAcGFyYW0gb2JqZWN0IFRoZSBnaXZlbiBvYmplY3QgdHlwZSwgYW4gYXJyYXkgb2Ygb3Igb25seSBhIHNpbmdsZSBvYmplY3QsIHRvIGJlIHZhbGlkYXRlZC5cbiAqIEByZXR1cm5zIHRocm93cyBhIFpvZCBFcnJvciBpZiB2YWxpZGF0aW9ucyBhcmUgYnJva2VuLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVDb25zdHJhaW50czxUPihjb25zdHJhaW50czogQ29uc3RyYWludHNUeXBlPFQ+LCBjb250ZXh0OiBzdHJpbmcsIC4uLm9iamVjdDogYW55KSB7XG5cbiAgICBpZiAob2JqZWN0ICE9IHVuZGVmaW5lZClcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvYmplY3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGZvciAobGV0IGsgaW4gY29uc3RyYWludHMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb25zdHJhaW50OiBDb25zdHJhaW50ID0gY29uc3RyYWludHNba10hO1xuICAgICAgICAgICAgICAgIGNvbnN0cmFpbnQudmFsaWRhdGUoY29udGV4dCArIFwiLlwiICsgaywgb2JqZWN0W2ldW2tdLCBrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxufSJdfQ==