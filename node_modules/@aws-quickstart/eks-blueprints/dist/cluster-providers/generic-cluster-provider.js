"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GenericClusterProvider = exports.ClusterBuilder = exports.defaultOptions = exports.GenericClusterPropsConstraints = exports.FargateProfileConstraints = exports.AutoscalingNodeGroupConstraints = exports.ManagedNodeGroupConstraints = exports.clusterBuilder = void 0;
const autoscaling = require("aws-cdk-lib/aws-autoscaling");
const ec2 = require("aws-cdk-lib/aws-ec2");
const eks = require("aws-cdk-lib/aws-eks");
const spi_1 = require("../spi");
const utils = require("../utils");
const constants = require("./constants");
const assert = require("assert");
function clusterBuilder() {
    return new ClusterBuilder();
}
exports.clusterBuilder = clusterBuilder;
class ManagedNodeGroupConstraints {
    constructor() {
        /**
         * id can be no less than 1 character long, and no greater than 63 characters long due to DNS system limitations.
         * https://kubernetes.io/docs/concepts/overview/working-with-objects/names/
         */
        this.id = new utils.StringConstraint(1, 63);
        /**
        * nodes per node group has a soft limit of 450 nodes, and as little as 0. But we multiply that by a factor of 5 to 2250 in case
        * of situations of a hard limit request being accepted, and as a result the limit would be raised
        * https://docs.aws.amazon.com/eks/latest/userguide/service-quotas.html
        */
        this.minSize = new utils.NumberConstraint(0, 2250);
        /**
         * nodes per node group has a soft limit of 450 nodes, and as little as 0. But we multiply that by a factor of 5 to 2250 in case
         * of situations of a hard limit request being accepted, and as a result the limit would be raised
         * https://docs.aws.amazon.com/eks/latest/userguide/service-quotas.html
         */
        this.maxSize = new utils.NumberConstraint(0, 2250);
        /**
         * Nodes per node group has a soft limit of 450 nodes, and as little as 0. But we multiply that by a factor of 5 to 2250 in case
         * of situations of a hard limit request being accepted, and as a result the limit would be raised
         * https://docs.aws.amazon.com/eks/latest/userguide/service-quotas.html
         */
        this.desiredSize = new utils.NumberConstraint(0, 2250);
        /**
         * amiReleaseVersion can be no less than 1 character long, and no greater than 1024 characters long.
         * https://docs.aws.amazon.com/imagebuilder/latest/APIReference/API_Ami.html
         */
        this.amiReleaseVersion = new utils.StringConstraint(1, 1024);
    }
}
exports.ManagedNodeGroupConstraints = ManagedNodeGroupConstraints;
class AutoscalingNodeGroupConstraints {
    constructor() {
        /**
        * id can be no less than 1 character long, and no greater than 63 characters long due to DNS system limitations.
        * https://kubernetes.io/docs/concepts/overview/working-with-objects/names/
        */
        this.id = new utils.StringConstraint(1, 63);
        /**
        * Allowed range is 0 to 5000 inclusive.
        * https://kubernetes.io/docs/setup/best-practices/cluster-large/
        */
        this.minSize = new utils.NumberConstraint(0, 5000);
        /**
        * Allowed range is 0 to 5000 inclusive.
        * https://kubernetes.io/docs/setup/best-practices/cluster-large/
        */
        this.maxSize = new utils.NumberConstraint(0, 5000);
        /**
        * Allowed range is 0 to 5000 inclusive.
        * https://kubernetes.io/docs/setup/best-practices/cluster-large/
        */
        this.desiredSize = new utils.NumberConstraint(0, 5000);
    }
}
exports.AutoscalingNodeGroupConstraints = AutoscalingNodeGroupConstraints;
class FargateProfileConstraints {
    constructor() {
        /**
        * fargateProfileNames can be no less than 1 character long, and no greater than 63 characters long due to DNS system limitations.
        * https://kubernetes.io/docs/concepts/overview/working-with-objects/names/
        */
        this.fargateProfileName = new utils.StringConstraint(1, 63);
    }
}
exports.FargateProfileConstraints = FargateProfileConstraints;
class GenericClusterPropsConstraints {
    constructor() {
        /**
        * managedNodeGroups per cluster have a soft limit of 30 managed node groups per EKS cluster, and as little as 0. But we multiply that
        * by a factor of 5 to 150 in case of situations of a hard limit request being accepted, and as a result the limit would be raised.
        * https://docs.aws.amazon.com/eks/latest/userguide/service-quotas.html
        */
        this.managedNodeGroups = new utils.ArrayConstraint(0, 150);
        /**
        * autoscalingNodeGroups per cluster have a soft limit of 500 autoscaling node groups per EKS cluster, and as little as 0. But we multiply that
        * by a factor of 5 to 2500 in case of situations of a hard limit request being accepted, and as a result the limit would be raised.
        * https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-quotas.html
        */
        this.autoscalingNodeGroups = new utils.ArrayConstraint(0, 5000);
    }
}
exports.GenericClusterPropsConstraints = GenericClusterPropsConstraints;
exports.defaultOptions = {
    version: eks.KubernetesVersion.V1_21
};
class ClusterBuilder {
    constructor() {
        this.props = {};
        this.privateCluster = false;
        this.managedNodeGroups = [];
        this.autoscalingNodeGroups = [];
        this.fargateProfiles = {};
        this.props = { ...this.props, ...{ version: eks.KubernetesVersion.V1_21 } };
    }
    withCommonOptions(options) {
        this.props = { ...this.props, ...options };
        return this;
    }
    managedNodeGroup(...nodeGroups) {
        this.managedNodeGroups = this.managedNodeGroups.concat(nodeGroups);
        return this;
    }
    autoscalingGroup(...nodeGroups) {
        this.autoscalingNodeGroups = this.autoscalingNodeGroups.concat(nodeGroups);
        return this;
    }
    fargateProfile(name, options) {
        this.fargateProfiles[name] = options;
        return this;
    }
    build() {
        return new GenericClusterProvider({
            ...this.props,
            version: this.props.version,
            privateCluster: this.privateCluster,
            managedNodeGroups: this.managedNodeGroups,
            autoscalingNodeGroups: this.autoscalingNodeGroups,
            fargateProfiles: this.fargateProfiles
        });
    }
}
exports.ClusterBuilder = ClusterBuilder;
/**
 * Cluster provider implementation that supports multiple node groups.
 */
class GenericClusterProvider {
    constructor(props) {
        this.props = props;
        this.validateInput(props);
        assert(!(props.managedNodeGroups && props.managedNodeGroups.length > 0
            && props.autoscalingNodeGroups && props.autoscalingNodeGroups.length > 0), "Mixing managed and autoscaling node groups is not supported. Please file a request on GitHub to add this support if needed.");
    }
    /**
     * @override
     */
    createCluster(scope, vpc) {
        var _a, _b, _c, _d, _e, _f;
        const id = scope.node.id;
        // Props for the cluster.
        const clusterName = (_a = this.props.clusterName) !== null && _a !== void 0 ? _a : id;
        const outputClusterName = true;
        const version = this.props.version;
        const privateCluster = (_b = this.props.privateCluster) !== null && _b !== void 0 ? _b : utils.valueFromContext(scope, constants.PRIVATE_CLUSTER, false);
        const endpointAccess = (privateCluster === true) ? eks.EndpointAccess.PRIVATE : eks.EndpointAccess.PUBLIC_AND_PRIVATE;
        const vpcSubnets = (_c = this.props.vpcSubnets) !== null && _c !== void 0 ? _c : (privateCluster === true ? [{ subnetType: ec2.SubnetType.PRIVATE_WITH_NAT }] : undefined);
        const defaultOptions = {
            vpc,
            clusterName,
            outputClusterName,
            version,
            vpcSubnets,
            endpointAccess,
            defaultCapacity: 0 // we want to manage capacity ourselves
        };
        const clusterOptions = { ...defaultOptions, ...this.props };
        // Create an EKS Cluster
        const cluster = this.internalCreateCluster(scope, id, clusterOptions);
        cluster.node.addDependency(vpc);
        const nodeGroups = [];
        (_d = this.props.managedNodeGroups) === null || _d === void 0 ? void 0 : _d.forEach(n => {
            const nodeGroup = this.addManagedNodeGroup(cluster, n);
            nodeGroups.push(nodeGroup);
        });
        const autoscalingGroups = [];
        (_e = this.props.autoscalingNodeGroups) === null || _e === void 0 ? void 0 : _e.forEach(n => {
            const autoscalingGroup = this.addAutoScalingGroup(cluster, n);
            autoscalingGroups.push(autoscalingGroup);
        });
        const fargateProfiles = Object.entries((_f = this.props.fargateProfiles) !== null && _f !== void 0 ? _f : {});
        fargateProfiles === null || fargateProfiles === void 0 ? void 0 : fargateProfiles.forEach(([key, options]) => this.addFargateProfile(cluster, key, options));
        return new spi_1.ClusterInfo(cluster, version, nodeGroups, autoscalingGroups);
    }
    /**
     * Template method that may be overridden by subclasses to create a specific cluster flavor (e.g. FargateCluster vs eks.Cluster)
     * @param scope
     * @param id
     * @param clusterOptions
     * @returns
     */
    internalCreateCluster(scope, id, clusterOptions) {
        return new eks.Cluster(scope, id, clusterOptions);
    }
    /**
     * Adds an autoscaling group to the cluster.
     * @param cluster
     * @param nodeGroup
     * @returns
     */
    addAutoScalingGroup(cluster, nodeGroup) {
        var _a, _b, _c, _d, _e, _f, _g;
        const machineImageType = (_a = nodeGroup.machineImageType) !== null && _a !== void 0 ? _a : eks.MachineImageType.AMAZON_LINUX_2;
        const instanceType = (_b = nodeGroup.instanceType) !== null && _b !== void 0 ? _b : utils.valueFromContext(cluster, constants.INSTANCE_TYPE_KEY, constants.DEFAULT_INSTANCE_TYPE);
        const minSize = (_c = nodeGroup.minSize) !== null && _c !== void 0 ? _c : utils.valueFromContext(cluster, constants.MIN_SIZE_KEY, constants.DEFAULT_NG_MINSIZE);
        const maxSize = (_d = nodeGroup.maxSize) !== null && _d !== void 0 ? _d : utils.valueFromContext(cluster, constants.MAX_SIZE_KEY, constants.DEFAULT_NG_MAXSIZE);
        const desiredSize = (_e = nodeGroup.desiredSize) !== null && _e !== void 0 ? _e : utils.valueFromContext(cluster, constants.DESIRED_SIZE_KEY, minSize);
        const updatePolicy = (_f = nodeGroup.updatePolicy) !== null && _f !== void 0 ? _f : autoscaling.UpdatePolicy.rollingUpdate();
        // Create an autoscaling group
        return cluster.addAutoScalingGroupCapacity(nodeGroup.id, {
            ...nodeGroup,
            ...{
                autoScalingGroupName: (_g = nodeGroup.autoScalingGroupName) !== null && _g !== void 0 ? _g : nodeGroup.id,
                machineImageType,
                instanceType,
                minCapacity: minSize,
                maxCapacity: maxSize,
                desiredCapacity: desiredSize,
                updatePolicy,
                vpcSubnets: nodeGroup.nodeGroupSubnets,
            }
        });
    }
    /**
     * Adds a fargate profile to the cluster
     */
    addFargateProfile(cluster, name, profileOptions) {
        cluster.addFargateProfile(name, profileOptions);
    }
    /**
     * Adds a managed node group to the cluster.
     * @param cluster
     * @param nodeGroup
     * @returns
     */
    addManagedNodeGroup(cluster, nodeGroup) {
        var _a, _b, _c, _d, _e, _f, _g;
        const capacityType = nodeGroup.nodeGroupCapacityType;
        const releaseVersion = nodeGroup.amiReleaseVersion;
        const instanceTypes = (_a = nodeGroup.instanceTypes) !== null && _a !== void 0 ? _a : [utils.valueFromContext(cluster, constants.INSTANCE_TYPE_KEY, constants.DEFAULT_INSTANCE_TYPE)];
        const minSize = (_b = nodeGroup.minSize) !== null && _b !== void 0 ? _b : utils.valueFromContext(cluster, constants.MIN_SIZE_KEY, constants.DEFAULT_NG_MINSIZE);
        const maxSize = (_c = nodeGroup.maxSize) !== null && _c !== void 0 ? _c : utils.valueFromContext(cluster, constants.MAX_SIZE_KEY, constants.DEFAULT_NG_MAXSIZE);
        const desiredSize = (_d = nodeGroup.desiredSize) !== null && _d !== void 0 ? _d : utils.valueFromContext(cluster, constants.DESIRED_SIZE_KEY, minSize);
        // Create a managed node group.
        const nodegroupOptions = {
            ...nodeGroup,
            ...{
                nodegroupName: (_e = nodeGroup.nodegroupName) !== null && _e !== void 0 ? _e : nodeGroup.id,
                capacityType,
                instanceTypes,
                minSize,
                maxSize,
                desiredSize,
                releaseVersion,
                subnets: nodeGroup.nodeGroupSubnets
            }
        };
        if (nodeGroup.customAmi) {
            // Create launch template if custom AMI is provided.
            const lt = new ec2.LaunchTemplate(cluster, `${nodeGroup.id}-lt`, {
                machineImage: (_f = nodeGroup.customAmi) === null || _f === void 0 ? void 0 : _f.machineImage,
                userData: (_g = nodeGroup.customAmi) === null || _g === void 0 ? void 0 : _g.userData,
            });
            utils.setPath(nodegroupOptions, "launchTemplateSpec", {
                id: lt.launchTemplateId,
                version: lt.latestVersionNumber,
            });
            delete nodegroupOptions.amiType;
            delete nodegroupOptions.releaseVersion;
        }
        return cluster.addNodegroupCapacity(nodeGroup.id + "-ng", nodegroupOptions);
    }
    validateInput(props) {
        utils.validateConstraints(new GenericClusterPropsConstraints, GenericClusterProvider.name, props);
        if (props.managedNodeGroups != undefined)
            utils.validateConstraints(new ManagedNodeGroupConstraints, "ManagedNodeGroup", ...props.managedNodeGroups);
        if (props.autoscalingNodeGroups != undefined)
            utils.validateConstraints(new AutoscalingNodeGroupConstraints, "AutoscalingNodeGroups", ...props.autoscalingNodeGroups);
        if (props.fargateProfiles != undefined)
            utils.validateConstraints(new FargateProfileConstraints, "FargateProfiles", ...Object.values(props.fargateProfiles));
    }
}
exports.GenericClusterProvider = GenericClusterProvider;
//# sourceMappingURL=data:application/json;base64,